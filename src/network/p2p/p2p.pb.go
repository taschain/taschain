 // Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: p2p.proto

/*
Package p2p is a generated protocol buffer package.

It is generated from these files:
	p2p.proto

It has these top-level messages:
	RpcNode
	RpcEndPoint
	Ping
	Pong
	FindNode
	Neighbors
*/
package p2p

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type MessageType int32

const (
	MessageType_MessageNone      MessageType = 0
	MessageType_MessagePing      MessageType = 1
	MessageType_MessagePong      MessageType = 2
	MessageType_MessageFindnode  MessageType = 3
	MessageType_MessageNeighbors MessageType = 4
	MessageType_MessageData      MessageType = 5
)

var MessageType_name = map[int32]string{
	0: "MessageNone",
	1: "MessagePing",
	2: "MessagePong",
	3: "MessageFindnode",
	4: "MessageNeighbors",
	5: "MessageData",
}
var MessageType_value = map[string]int32{
	"MessageNone":      0,
	"MessagePing":      1,
	"MessagePong":      2,
	"MessageFindnode":  3,
	"MessageNeighbors": 4,
	"MessageData":      5,
}

func (x MessageType) String() string {
	return proto.EnumName(MessageType_name, int32(x))
}
func (MessageType) EnumDescriptor() ([]byte, []int) { return fileDescriptorP2P, []int{0} }

type RpcNode struct {
	IP   string `protobuf:"bytes,1,opt,name=IP,proto3" json:"IP,omitempty"`
	Port int32  `protobuf:"varint,2,opt,name=Port,proto3" json:"Port,omitempty"`
	ID   string `protobuf:"bytes,3,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (m *RpcNode) Reset()                    { *m = RpcNode{} }
func (m *RpcNode) String() string            { return proto.CompactTextString(m) }
func (*RpcNode) ProtoMessage()               {}
func (*RpcNode) Descriptor() ([]byte, []int) { return fileDescriptorP2P, []int{0} }

func (m *RpcNode) GetIP() string {
	if m != nil {
		return m.IP
	}
	return ""
}

func (m *RpcNode) GetPort() int32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *RpcNode) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

type RpcEndPoint struct {
	IP   string `protobuf:"bytes,1,opt,name=IP,proto3" json:"IP,omitempty"`
	Port int32  `protobuf:"varint,2,opt,name=Port,proto3" json:"Port,omitempty"`
}

func (m *RpcEndPoint) Reset()                    { *m = RpcEndPoint{} }
func (m *RpcEndPoint) String() string            { return proto.CompactTextString(m) }
func (*RpcEndPoint) ProtoMessage()               {}
func (*RpcEndPoint) Descriptor() ([]byte, []int) { return fileDescriptorP2P, []int{1} }

func (m *RpcEndPoint) GetIP() string {
	if m != nil {
		return m.IP
	}
	return ""
}

func (m *RpcEndPoint) GetPort() int32 {
	if m != nil {
		return m.Port
	}
	return 0
}

type Ping struct {
	Version    int32        `protobuf:"varint,1,opt,name=Version,proto3" json:"Version,omitempty"`
	From       *RpcEndPoint `protobuf:"bytes,2,opt,name=From" json:"From,omitempty"`
	To         *RpcEndPoint `protobuf:"bytes,3,opt,name=To" json:"To,omitempty"`
	Expiration uint64       `protobuf:"varint,4,opt,name=Expiration,proto3" json:"Expiration,omitempty"`
}

func (m *Ping) Reset()                    { *m = Ping{} }
func (m *Ping) String() string            { return proto.CompactTextString(m) }
func (*Ping) ProtoMessage()               {}
func (*Ping) Descriptor() ([]byte, []int) { return fileDescriptorP2P, []int{2} }

func (m *Ping) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *Ping) GetFrom() *RpcEndPoint {
	if m != nil {
		return m.From
	}
	return nil
}

func (m *Ping) GetTo() *RpcEndPoint {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *Ping) GetExpiration() uint64 {
	if m != nil {
		return m.Expiration
	}
	return 0
}

type Pong struct {
	To         *RpcEndPoint `protobuf:"bytes,1,opt,name=To" json:"To,omitempty"`
	ReplyToken []byte       `protobuf:"bytes,2,opt,name=ReplyToken,proto3" json:"ReplyToken,omitempty"`
	Expiration uint64       `protobuf:"varint,3,opt,name=Expiration,proto3" json:"Expiration,omitempty"`
}

func (m *Pong) Reset()                    { *m = Pong{} }
func (m *Pong) String() string            { return proto.CompactTextString(m) }
func (*Pong) ProtoMessage()               {}
func (*Pong) Descriptor() ([]byte, []int) { return fileDescriptorP2P, []int{3} }

func (m *Pong) GetTo() *RpcEndPoint {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *Pong) GetReplyToken() []byte {
	if m != nil {
		return m.ReplyToken
	}
	return nil
}

func (m *Pong) GetExpiration() uint64 {
	if m != nil {
		return m.Expiration
	}
	return 0
}

type FindNode struct {
	Target     []byte `protobuf:"bytes,1,opt,name=Target,proto3" json:"Target,omitempty"`
	Expiration uint64 `protobuf:"varint,2,opt,name=Expiration,proto3" json:"Expiration,omitempty"`
}

func (m *FindNode) Reset()                    { *m = FindNode{} }
func (m *FindNode) String() string            { return proto.CompactTextString(m) }
func (*FindNode) ProtoMessage()               {}
func (*FindNode) Descriptor() ([]byte, []int) { return fileDescriptorP2P, []int{4} }

func (m *FindNode) GetTarget() []byte {
	if m != nil {
		return m.Target
	}
	return nil
}

func (m *FindNode) GetExpiration() uint64 {
	if m != nil {
		return m.Expiration
	}
	return 0
}

type Neighbors struct {
	Nodes      []*RpcNode `protobuf:"bytes,1,rep,name=Nodes" json:"Nodes,omitempty"`
	Expiration uint64     `protobuf:"varint,2,opt,name=Expiration,proto3" json:"Expiration,omitempty"`
}

func (m *Neighbors) Reset()                    { *m = Neighbors{} }
func (m *Neighbors) String() string            { return proto.CompactTextString(m) }
func (*Neighbors) ProtoMessage()               {}
func (*Neighbors) Descriptor() ([]byte, []int) { return fileDescriptorP2P, []int{5} }

func (m *Neighbors) GetNodes() []*RpcNode {
	if m != nil {
		return m.Nodes
	}
	return nil
}

func (m *Neighbors) GetExpiration() uint64 {
	if m != nil {
		return m.Expiration
	}
	return 0
}

func init() {
	proto.RegisterType((*RpcNode)(nil), "p2p.RpcNode")
	proto.RegisterType((*RpcEndPoint)(nil), "p2p.RpcEndPoint")
	proto.RegisterType((*Ping)(nil), "p2p.Ping")
	proto.RegisterType((*Pong)(nil), "p2p.Pong")
	proto.RegisterType((*FindNode)(nil), "p2p.FindNode")
	proto.RegisterType((*Neighbors)(nil), "p2p.Neighbors")
	proto.RegisterEnum("p2p.MessageType", MessageType_name, MessageType_value)
}

func init() { proto.RegisterFile("p2p.proto", fileDescriptorP2P) }

var fileDescriptorP2P = []byte{
	// 345 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0x4f, 0x6b, 0xe3, 0x30,
	0x10, 0xc5, 0x57, 0xfe, 0x93, 0x6c, 0xc6, 0x61, 0x23, 0xb4, 0xcb, 0xe2, 0x53, 0x31, 0xa6, 0x07,
	0xd3, 0x43, 0xa0, 0xee, 0xb9, 0x97, 0x92, 0x04, 0x72, 0x68, 0x6a, 0x84, 0xe9, 0xdd, 0x89, 0x85,
	0x63, 0xda, 0x6a, 0x84, 0xec, 0x43, 0x03, 0xfd, 0x00, 0xfd, 0xd8, 0x45, 0xaa, 0x5d, 0x4c, 0x52,
	0xda, 0xde, 0x3c, 0x6f, 0x66, 0x7e, 0xef, 0x59, 0x12, 0x4c, 0x54, 0xaa, 0xe6, 0x4a, 0x63, 0x8b,
	0xcc, 0x55, 0xa9, 0x8a, 0xaf, 0x61, 0xcc, 0xd5, 0x6e, 0x83, 0xa5, 0x60, 0x7f, 0xc0, 0x59, 0x67,
	0x21, 0x89, 0x48, 0x32, 0xe1, 0xce, 0x3a, 0x63, 0x0c, 0xbc, 0x0c, 0x75, 0x1b, 0x3a, 0x11, 0x49,
	0x7c, 0x6e, 0xbf, 0xed, 0xcc, 0x22, 0x74, 0xbb, 0x99, 0x45, 0x7c, 0x09, 0x01, 0x57, 0xbb, 0xa5,
	0x2c, 0x33, 0xac, 0x65, 0xfb, 0x13, 0x44, 0xfc, 0x4a, 0xc0, 0xcb, 0x6a, 0x59, 0xb1, 0x10, 0xc6,
	0xf7, 0x42, 0x37, 0x35, 0x4a, 0xbb, 0xe1, 0xf3, 0xbe, 0x64, 0xe7, 0xe0, 0xad, 0x34, 0x3e, 0xd9,
	0xb5, 0x20, 0xa5, 0x73, 0x93, 0x79, 0x60, 0xc3, 0x6d, 0x97, 0x45, 0xe0, 0xe4, 0x68, 0xb3, 0x7c,
	0x36, 0xe3, 0xe4, 0xc8, 0xce, 0x00, 0x96, 0xcf, 0xaa, 0xd6, 0x45, 0x6b, 0x4c, 0xbc, 0x88, 0x24,
	0x1e, 0x1f, 0x28, 0xf1, 0xde, 0xc4, 0x93, 0x55, 0x47, 0x22, 0x5f, 0x93, 0xb8, 0x50, 0x8f, 0x87,
	0x1c, 0x1f, 0x84, 0xb4, 0xb9, 0xa6, 0x7c, 0xa0, 0x1c, 0x39, 0xb9, 0x27, 0x4e, 0x37, 0xf0, 0x7b,
	0x55, 0xcb, 0xd2, 0x9e, 0xf3, 0x7f, 0x18, 0xe5, 0x85, 0xae, 0x44, 0x6b, 0x1d, 0xa7, 0xbc, 0xab,
	0x8e, 0x18, 0xce, 0x09, 0xe3, 0x0e, 0x26, 0x1b, 0x51, 0x57, 0xfb, 0x2d, 0xea, 0x86, 0xc5, 0xe0,
	0x1b, 0x58, 0x13, 0x92, 0xc8, 0x4d, 0x82, 0x74, 0xda, 0xa7, 0x36, 0x22, 0x7f, 0x6f, 0x7d, 0x07,
	0xbc, 0x78, 0x81, 0xe0, 0x56, 0x34, 0x4d, 0x51, 0x89, 0xfc, 0xa0, 0x04, 0x9b, 0x7d, 0x94, 0x1b,
	0x94, 0x82, 0xfe, 0x1a, 0x08, 0xe6, 0xbe, 0x28, 0x19, 0x0a, 0x28, 0x2b, 0xea, 0xb0, 0xbf, 0x30,
	0xeb, 0x04, 0xf3, 0x77, 0x12, 0x4b, 0x41, 0x5d, 0xf6, 0x0f, 0x68, 0xcf, 0xe9, 0xe3, 0x52, 0x6f,
	0xb0, 0xbb, 0x28, 0xda, 0x82, 0xfa, 0xdb, 0x91, 0x7d, 0x85, 0x57, 0x6f, 0x01, 0x00, 0x00, 0xff,
	0xff, 0xa9, 0xf2, 0x79, 0x6e, 0x92, 0x02, 0x00, 0x00,
}
