// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: p2p.proto

/*
	Package network is a generated protocol buffer package.

	It is generated from these files:
		p2p.proto

	It has these top-level messages:
		RpcNode
		RpcEndPoint
		MsgPing
		MsgPong
		MsgFindNode
		MsgNeighbors
		MsgData
*/
package network

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type MessageType int32

const (
	MessageType_MessageNone      MessageType = 0
	MessageType_MessagePing      MessageType = 1
	MessageType_MessagePong      MessageType = 2
	MessageType_MessageFindnode  MessageType = 3
	MessageType_MessageNeighbors MessageType = 4
	MessageType_MessageData      MessageType = 5
)

var MessageType_name = map[int32]string{
	0: "MessageNone",
	1: "MessagePing",
	2: "MessagePong",
	3: "MessageFindnode",
	4: "MessageNeighbors",
	5: "MessageData",
}
var MessageType_value = map[string]int32{
	"MessageNone":      0,
	"MessagePing":      1,
	"MessagePong":      2,
	"MessageFindnode":  3,
	"MessageNeighbors": 4,
	"MessageData":      5,
}

func (x MessageType) String() string {
	return proto.EnumName(MessageType_name, int32(x))
}
func (MessageType) EnumDescriptor() ([]byte, []int) { return fileDescriptorP2P, []int{0} }

type DataType int32

const (
	DataType_DataNormal DataType = 0
	DataType_DataGroup  DataType = 1
	DataType_DataGlobal DataType = 2
)

var DataType_name = map[int32]string{
	0: "DataNormal",
	1: "DataGroup",
	2: "DataGlobal",
}
var DataType_value = map[string]int32{
	"DataNormal": 0,
	"DataGroup":  1,
	"DataGlobal": 2,
}

func (x DataType) String() string {
	return proto.EnumName(DataType_name, int32(x))
}
func (DataType) EnumDescriptor() ([]byte, []int) { return fileDescriptorP2P, []int{1} }

type RpcNode struct {
	Ip   string `protobuf:"bytes,1,opt,name=Ip,proto3" json:"Ip,omitempty"`
	Port int32  `protobuf:"varint,2,opt,name=Port,proto3" json:"Port,omitempty"`
	Id   string `protobuf:"bytes,3,opt,name=Id,proto3" json:"Id,omitempty"`
}

func (m *RpcNode) Reset()                    { *m = RpcNode{} }
func (m *RpcNode) String() string            { return proto.CompactTextString(m) }
func (*RpcNode) ProtoMessage()               {}
func (*RpcNode) Descriptor() ([]byte, []int) { return fileDescriptorP2P, []int{0} }

func (m *RpcNode) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *RpcNode) GetPort() int32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *RpcNode) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type RpcEndPoint struct {
	Ip   string `protobuf:"bytes,1,opt,name=Ip,proto3" json:"Ip,omitempty"`
	Port int32  `protobuf:"varint,2,opt,name=Port,proto3" json:"Port,omitempty"`
}

func (m *RpcEndPoint) Reset()                    { *m = RpcEndPoint{} }
func (m *RpcEndPoint) String() string            { return proto.CompactTextString(m) }
func (*RpcEndPoint) ProtoMessage()               {}
func (*RpcEndPoint) Descriptor() ([]byte, []int) { return fileDescriptorP2P, []int{1} }

func (m *RpcEndPoint) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *RpcEndPoint) GetPort() int32 {
	if m != nil {
		return m.Port
	}
	return 0
}

type MsgPing struct {
	Version    int32        `protobuf:"varint,1,opt,name=Version,proto3" json:"Version,omitempty"`
	From       *RpcEndPoint `protobuf:"bytes,2,opt,name=From" json:"From,omitempty"`
	To         *RpcEndPoint `protobuf:"bytes,3,opt,name=To" json:"To,omitempty"`
	NodeId     []byte       `protobuf:"bytes,4,opt,name=NodeId,proto3" json:"NodeId,omitempty"`
	Expiration uint64       `protobuf:"varint,5,opt,name=Expiration,proto3" json:"Expiration,omitempty"`
}

func (m *MsgPing) Reset()                    { *m = MsgPing{} }
func (m *MsgPing) String() string            { return proto.CompactTextString(m) }
func (*MsgPing) ProtoMessage()               {}
func (*MsgPing) Descriptor() ([]byte, []int) { return fileDescriptorP2P, []int{2} }

func (m *MsgPing) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *MsgPing) GetFrom() *RpcEndPoint {
	if m != nil {
		return m.From
	}
	return nil
}

func (m *MsgPing) GetTo() *RpcEndPoint {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *MsgPing) GetNodeId() []byte {
	if m != nil {
		return m.NodeId
	}
	return nil
}

func (m *MsgPing) GetExpiration() uint64 {
	if m != nil {
		return m.Expiration
	}
	return 0
}

type MsgPong struct {
	To         *RpcEndPoint `protobuf:"bytes,1,opt,name=To" json:"To,omitempty"`
	ReplyToken []byte       `protobuf:"bytes,2,opt,name=ReplyToken,proto3" json:"ReplyToken,omitempty"`
	Expiration uint64       `protobuf:"varint,3,opt,name=Expiration,proto3" json:"Expiration,omitempty"`
}

func (m *MsgPong) Reset()                    { *m = MsgPong{} }
func (m *MsgPong) String() string            { return proto.CompactTextString(m) }
func (*MsgPong) ProtoMessage()               {}
func (*MsgPong) Descriptor() ([]byte, []int) { return fileDescriptorP2P, []int{3} }

func (m *MsgPong) GetTo() *RpcEndPoint {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *MsgPong) GetReplyToken() []byte {
	if m != nil {
		return m.ReplyToken
	}
	return nil
}

func (m *MsgPong) GetExpiration() uint64 {
	if m != nil {
		return m.Expiration
	}
	return 0
}

type MsgFindNode struct {
	Target     []byte `protobuf:"bytes,1,opt,name=Target,proto3" json:"Target,omitempty"`
	Expiration uint64 `protobuf:"varint,2,opt,name=Expiration,proto3" json:"Expiration,omitempty"`
}

func (m *MsgFindNode) Reset()                    { *m = MsgFindNode{} }
func (m *MsgFindNode) String() string            { return proto.CompactTextString(m) }
func (*MsgFindNode) ProtoMessage()               {}
func (*MsgFindNode) Descriptor() ([]byte, []int) { return fileDescriptorP2P, []int{4} }

func (m *MsgFindNode) GetTarget() []byte {
	if m != nil {
		return m.Target
	}
	return nil
}

func (m *MsgFindNode) GetExpiration() uint64 {
	if m != nil {
		return m.Expiration
	}
	return 0
}

type MsgNeighbors struct {
	Nodes      []*RpcNode `protobuf:"bytes,1,rep,name=Nodes" json:"Nodes,omitempty"`
	Expiration uint64     `protobuf:"varint,2,opt,name=Expiration,proto3" json:"Expiration,omitempty"`
}

func (m *MsgNeighbors) Reset()                    { *m = MsgNeighbors{} }
func (m *MsgNeighbors) String() string            { return proto.CompactTextString(m) }
func (*MsgNeighbors) ProtoMessage()               {}
func (*MsgNeighbors) Descriptor() ([]byte, []int) { return fileDescriptorP2P, []int{5} }

func (m *MsgNeighbors) GetNodes() []*RpcNode {
	if m != nil {
		return m.Nodes
	}
	return nil
}

func (m *MsgNeighbors) GetExpiration() uint64 {
	if m != nil {
		return m.Expiration
	}
	return 0
}

type MsgData struct {
	DataType   DataType `protobuf:"varint,1,opt,name=dataType,proto3,enum=network.DataType" json:"dataType,omitempty"`
	GroupId    string   `protobuf:"bytes,2,opt,name=groupId,proto3" json:"groupId,omitempty"`
	Expiration uint64   `protobuf:"varint,3,opt,name=Expiration,proto3" json:"Expiration,omitempty"`
	MessageId  uint64   `protobuf:"varint,4,opt,name=messageId,proto3" json:"messageId,omitempty"`
	DestNodeId []byte   `protobuf:"bytes,5,opt,name=DestNodeId,proto3" json:"DestNodeId,omitempty"`
	SrcNodeId  []byte   `protobuf:"bytes,6,opt,name=SrcNodeId,proto3" json:"SrcNodeId,omitempty"`
	Data       []byte   `protobuf:"bytes,7,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *MsgData) Reset()                    { *m = MsgData{} }
func (m *MsgData) String() string            { return proto.CompactTextString(m) }
func (*MsgData) ProtoMessage()               {}
func (*MsgData) Descriptor() ([]byte, []int) { return fileDescriptorP2P, []int{6} }

func (m *MsgData) GetDataType() DataType {
	if m != nil {
		return m.DataType
	}
	return DataType_DataNormal
}

func (m *MsgData) GetGroupId() string {
	if m != nil {
		return m.GroupId
	}
	return ""
}

func (m *MsgData) GetExpiration() uint64 {
	if m != nil {
		return m.Expiration
	}
	return 0
}

func (m *MsgData) GetMessageId() uint64 {
	if m != nil {
		return m.MessageId
	}
	return 0
}

func (m *MsgData) GetDestNodeId() []byte {
	if m != nil {
		return m.DestNodeId
	}
	return nil
}

func (m *MsgData) GetSrcNodeId() []byte {
	if m != nil {
		return m.SrcNodeId
	}
	return nil
}

func (m *MsgData) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*RpcNode)(nil), "network.RpcNode")
	proto.RegisterType((*RpcEndPoint)(nil), "network.RpcEndPoint")
	proto.RegisterType((*MsgPing)(nil), "network.MsgPing")
	proto.RegisterType((*MsgPong)(nil), "network.MsgPong")
	proto.RegisterType((*MsgFindNode)(nil), "network.MsgFindNode")
	proto.RegisterType((*MsgNeighbors)(nil), "network.MsgNeighbors")
	proto.RegisterType((*MsgData)(nil), "network.MsgData")
	proto.RegisterEnum("network.MessageType", MessageType_name, MessageType_value)
	proto.RegisterEnum("network.DataType", DataType_name, DataType_value)
}
func (m *RpcNode) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RpcNode) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Ip) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintP2P(dAtA, i, uint64(len(m.Ip)))
		i += copy(dAtA[i:], m.Ip)
	}
	if m.Port != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintP2P(dAtA, i, uint64(m.Port))
	}
	if len(m.Id) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintP2P(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	return i, nil
}

func (m *RpcEndPoint) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RpcEndPoint) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Ip) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintP2P(dAtA, i, uint64(len(m.Ip)))
		i += copy(dAtA[i:], m.Ip)
	}
	if m.Port != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintP2P(dAtA, i, uint64(m.Port))
	}
	return i, nil
}

func (m *MsgPing) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgPing) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Version != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintP2P(dAtA, i, uint64(m.Version))
	}
	if m.From != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintP2P(dAtA, i, uint64(m.From.Size()))
		n1, err := m.From.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.To != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintP2P(dAtA, i, uint64(m.To.Size()))
		n2, err := m.To.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if len(m.NodeId) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintP2P(dAtA, i, uint64(len(m.NodeId)))
		i += copy(dAtA[i:], m.NodeId)
	}
	if m.Expiration != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintP2P(dAtA, i, uint64(m.Expiration))
	}
	return i, nil
}

func (m *MsgPong) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgPong) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.To != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintP2P(dAtA, i, uint64(m.To.Size()))
		n3, err := m.To.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if len(m.ReplyToken) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintP2P(dAtA, i, uint64(len(m.ReplyToken)))
		i += copy(dAtA[i:], m.ReplyToken)
	}
	if m.Expiration != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintP2P(dAtA, i, uint64(m.Expiration))
	}
	return i, nil
}

func (m *MsgFindNode) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgFindNode) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Target) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintP2P(dAtA, i, uint64(len(m.Target)))
		i += copy(dAtA[i:], m.Target)
	}
	if m.Expiration != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintP2P(dAtA, i, uint64(m.Expiration))
	}
	return i, nil
}

func (m *MsgNeighbors) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgNeighbors) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Nodes) > 0 {
		for _, msg := range m.Nodes {
			dAtA[i] = 0xa
			i++
			i = encodeVarintP2P(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Expiration != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintP2P(dAtA, i, uint64(m.Expiration))
	}
	return i, nil
}

func (m *MsgData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.DataType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintP2P(dAtA, i, uint64(m.DataType))
	}
	if len(m.GroupId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintP2P(dAtA, i, uint64(len(m.GroupId)))
		i += copy(dAtA[i:], m.GroupId)
	}
	if m.Expiration != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintP2P(dAtA, i, uint64(m.Expiration))
	}
	if m.MessageId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintP2P(dAtA, i, uint64(m.MessageId))
	}
	if len(m.DestNodeId) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintP2P(dAtA, i, uint64(len(m.DestNodeId)))
		i += copy(dAtA[i:], m.DestNodeId)
	}
	if len(m.SrcNodeId) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintP2P(dAtA, i, uint64(len(m.SrcNodeId)))
		i += copy(dAtA[i:], m.SrcNodeId)
	}
	if len(m.Data) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintP2P(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	return i, nil
}

func encodeVarintP2P(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *RpcNode) Size() (n int) {
	var l int
	_ = l
	l = len(m.Ip)
	if l > 0 {
		n += 1 + l + sovP2P(uint64(l))
	}
	if m.Port != 0 {
		n += 1 + sovP2P(uint64(m.Port))
	}
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovP2P(uint64(l))
	}
	return n
}

func (m *RpcEndPoint) Size() (n int) {
	var l int
	_ = l
	l = len(m.Ip)
	if l > 0 {
		n += 1 + l + sovP2P(uint64(l))
	}
	if m.Port != 0 {
		n += 1 + sovP2P(uint64(m.Port))
	}
	return n
}

func (m *MsgPing) Size() (n int) {
	var l int
	_ = l
	if m.Version != 0 {
		n += 1 + sovP2P(uint64(m.Version))
	}
	if m.From != nil {
		l = m.From.Size()
		n += 1 + l + sovP2P(uint64(l))
	}
	if m.To != nil {
		l = m.To.Size()
		n += 1 + l + sovP2P(uint64(l))
	}
	l = len(m.NodeId)
	if l > 0 {
		n += 1 + l + sovP2P(uint64(l))
	}
	if m.Expiration != 0 {
		n += 1 + sovP2P(uint64(m.Expiration))
	}
	return n
}

func (m *MsgPong) Size() (n int) {
	var l int
	_ = l
	if m.To != nil {
		l = m.To.Size()
		n += 1 + l + sovP2P(uint64(l))
	}
	l = len(m.ReplyToken)
	if l > 0 {
		n += 1 + l + sovP2P(uint64(l))
	}
	if m.Expiration != 0 {
		n += 1 + sovP2P(uint64(m.Expiration))
	}
	return n
}

func (m *MsgFindNode) Size() (n int) {
	var l int
	_ = l
	l = len(m.Target)
	if l > 0 {
		n += 1 + l + sovP2P(uint64(l))
	}
	if m.Expiration != 0 {
		n += 1 + sovP2P(uint64(m.Expiration))
	}
	return n
}

func (m *MsgNeighbors) Size() (n int) {
	var l int
	_ = l
	if len(m.Nodes) > 0 {
		for _, e := range m.Nodes {
			l = e.Size()
			n += 1 + l + sovP2P(uint64(l))
		}
	}
	if m.Expiration != 0 {
		n += 1 + sovP2P(uint64(m.Expiration))
	}
	return n
}

func (m *MsgData) Size() (n int) {
	var l int
	_ = l
	if m.DataType != 0 {
		n += 1 + sovP2P(uint64(m.DataType))
	}
	l = len(m.GroupId)
	if l > 0 {
		n += 1 + l + sovP2P(uint64(l))
	}
	if m.Expiration != 0 {
		n += 1 + sovP2P(uint64(m.Expiration))
	}
	if m.MessageId != 0 {
		n += 1 + sovP2P(uint64(m.MessageId))
	}
	l = len(m.DestNodeId)
	if l > 0 {
		n += 1 + l + sovP2P(uint64(l))
	}
	l = len(m.SrcNodeId)
	if l > 0 {
		n += 1 + l + sovP2P(uint64(l))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovP2P(uint64(l))
	}
	return n
}

func sovP2P(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozP2P(x uint64) (n int) {
	return sovP2P(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RpcNode) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowP2P
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RpcNode: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RpcNode: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ip", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2P
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthP2P
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ip = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			m.Port = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2P
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Port |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2P
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthP2P
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipP2P(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthP2P
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RpcEndPoint) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowP2P
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RpcEndPoint: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RpcEndPoint: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ip", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2P
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthP2P
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ip = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			m.Port = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2P
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Port |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipP2P(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthP2P
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgPing) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowP2P
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgPing: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgPing: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2P
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2P
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthP2P
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.From == nil {
				m.From = &RpcEndPoint{}
			}
			if err := m.From.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2P
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthP2P
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.To == nil {
				m.To = &RpcEndPoint{}
			}
			if err := m.To.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2P
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthP2P
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeId = append(m.NodeId[:0], dAtA[iNdEx:postIndex]...)
			if m.NodeId == nil {
				m.NodeId = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expiration", wireType)
			}
			m.Expiration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2P
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Expiration |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipP2P(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthP2P
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgPong) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowP2P
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgPong: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgPong: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2P
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthP2P
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.To == nil {
				m.To = &RpcEndPoint{}
			}
			if err := m.To.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplyToken", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2P
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthP2P
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReplyToken = append(m.ReplyToken[:0], dAtA[iNdEx:postIndex]...)
			if m.ReplyToken == nil {
				m.ReplyToken = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expiration", wireType)
			}
			m.Expiration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2P
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Expiration |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipP2P(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthP2P
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgFindNode) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowP2P
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgFindNode: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgFindNode: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Target", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2P
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthP2P
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Target = append(m.Target[:0], dAtA[iNdEx:postIndex]...)
			if m.Target == nil {
				m.Target = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expiration", wireType)
			}
			m.Expiration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2P
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Expiration |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipP2P(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthP2P
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgNeighbors) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowP2P
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgNeighbors: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgNeighbors: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nodes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2P
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthP2P
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nodes = append(m.Nodes, &RpcNode{})
			if err := m.Nodes[len(m.Nodes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expiration", wireType)
			}
			m.Expiration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2P
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Expiration |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipP2P(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthP2P
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowP2P
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataType", wireType)
			}
			m.DataType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2P
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DataType |= (DataType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2P
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthP2P
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expiration", wireType)
			}
			m.Expiration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2P
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Expiration |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageId", wireType)
			}
			m.MessageId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2P
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MessageId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestNodeId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2P
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthP2P
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DestNodeId = append(m.DestNodeId[:0], dAtA[iNdEx:postIndex]...)
			if m.DestNodeId == nil {
				m.DestNodeId = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcNodeId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2P
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthP2P
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SrcNodeId = append(m.SrcNodeId[:0], dAtA[iNdEx:postIndex]...)
			if m.SrcNodeId == nil {
				m.SrcNodeId = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2P
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthP2P
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipP2P(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthP2P
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipP2P(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowP2P
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowP2P
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowP2P
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthP2P
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowP2P
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipP2P(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthP2P = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowP2P   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("p2p.proto", fileDescriptorP2P) }

var fileDescriptorP2P = []byte{
	// 513 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x53, 0xd1, 0x8a, 0xda, 0x40,
	0x14, 0x75, 0x62, 0xa2, 0xeb, 0xd5, 0xba, 0xd3, 0xe9, 0xb2, 0xe4, 0xa1, 0x04, 0x91, 0x52, 0xc2,
	0x42, 0x85, 0xda, 0xa7, 0x3e, 0xf4, 0xa5, 0xe8, 0x2e, 0x3e, 0x28, 0x32, 0x95, 0x7d, 0x8f, 0x66,
	0x48, 0xc3, 0xea, 0xdc, 0x61, 0x92, 0xd2, 0x2e, 0xf4, 0x43, 0xfa, 0x0f, 0xfd, 0x91, 0x3e, 0xf6,
	0x13, 0x8a, 0xfd, 0x91, 0x32, 0x93, 0x44, 0xc3, 0x2e, 0xc5, 0x7d, 0x9b, 0x7b, 0xce, 0xbd, 0xe7,
	0x1e, 0xef, 0x89, 0xd0, 0x51, 0x63, 0x35, 0x52, 0x1a, 0x73, 0x64, 0x6d, 0x29, 0xf2, 0xaf, 0xa8,
	0xef, 0x86, 0x1f, 0xa0, 0xcd, 0xd5, 0x66, 0x81, 0xb1, 0x60, 0x7d, 0x70, 0x66, 0xca, 0x27, 0x03,
	0x12, 0x76, 0xb8, 0x33, 0x53, 0x8c, 0x81, 0xbb, 0x44, 0x9d, 0xfb, 0xce, 0x80, 0x84, 0x1e, 0xb7,
	0x6f, 0xdb, 0x13, 0xfb, 0xcd, 0xb2, 0x27, 0x1e, 0xbe, 0x85, 0x2e, 0x57, 0x9b, 0xa9, 0x8c, 0x97,
	0x98, 0xca, 0xfc, 0x29, 0x12, 0xc3, 0x9f, 0x04, 0xda, 0xf3, 0x2c, 0x59, 0xa6, 0x32, 0x61, 0x3e,
	0xb4, 0x6f, 0x85, 0xce, 0x52, 0x94, 0x76, 0xc8, 0xe3, 0x55, 0xc9, 0x42, 0x70, 0xaf, 0x35, 0xee,
	0xec, 0x64, 0x77, 0x7c, 0x31, 0x2a, 0xfd, 0x8e, 0x6a, 0xdb, 0xb8, 0xed, 0x60, 0xaf, 0xc0, 0x59,
	0xa1, 0xb5, 0xf4, 0xbf, 0x3e, 0x67, 0x85, 0xec, 0x12, 0x5a, 0xe6, 0x47, 0xce, 0x62, 0xdf, 0x1d,
	0x90, 0xb0, 0xc7, 0xcb, 0x8a, 0x05, 0x00, 0xd3, 0x6f, 0x2a, 0xd5, 0x51, 0x6e, 0x4c, 0x78, 0x03,
	0x12, 0xba, 0xbc, 0x86, 0x0c, 0xb1, 0x30, 0x8b, 0x32, 0x29, 0x17, 0x91, 0x13, 0x8b, 0x02, 0x00,
	0x2e, 0xd4, 0xf6, 0x7e, 0x85, 0x77, 0x42, 0x5a, 0xfb, 0x3d, 0x5e, 0x43, 0x1e, 0x2c, 0x6c, 0x3e,
	0x5a, 0x38, 0x85, 0xee, 0x3c, 0x4b, 0xae, 0x53, 0x19, 0xdb, 0x50, 0x2e, 0xa1, 0xb5, 0x8a, 0x74,
	0x22, 0x72, 0xbb, 0xb8, 0xc7, 0xcb, 0xea, 0x81, 0x8c, 0xf3, 0x48, 0xe6, 0x16, 0x7a, 0xf3, 0x2c,
	0x59, 0x88, 0x34, 0xf9, 0xbc, 0x46, 0x9d, 0xb1, 0xd7, 0xe0, 0x19, 0xbd, 0xcc, 0x27, 0x83, 0x66,
	0xd8, 0x1d, 0xd3, 0xba, 0x7f, 0x43, 0xf0, 0x82, 0x3e, 0xa9, 0xbb, 0x2f, 0xd2, 0x9b, 0x44, 0x79,
	0xc4, 0xde, 0xc0, 0x59, 0x1c, 0xe5, 0xd1, 0xea, 0x5e, 0x09, 0xeb, 0xae, 0x3f, 0x7e, 0x7e, 0x90,
	0x9d, 0x94, 0x04, 0x3f, 0xb4, 0x98, 0xb0, 0x13, 0x8d, 0x5f, 0xd4, 0x2c, 0xb6, 0xba, 0x1d, 0x5e,
	0x95, 0xa7, 0x6e, 0xc2, 0x5e, 0x42, 0x67, 0x27, 0xb2, 0x2c, 0x4a, 0xaa, 0xfc, 0x5c, 0x7e, 0x04,
	0xcc, 0xf4, 0x44, 0x64, 0x79, 0x19, 0xaf, 0x57, 0x5c, 0xfc, 0x88, 0x98, 0xe9, 0x4f, 0x7a, 0x53,
	0xd2, 0x2d, 0x4b, 0x1f, 0x01, 0xf3, 0x89, 0x1a, 0x87, 0x7e, 0xdb, 0x12, 0xf6, 0x7d, 0xf5, 0x1d,
	0xba, 0xf3, 0x42, 0xde, 0x1a, 0x3f, 0x3f, 0x94, 0x0b, 0x94, 0x82, 0x36, 0x6a, 0x80, 0xf9, 0x8a,
	0x29, 0xa9, 0x03, 0x28, 0x13, 0xea, 0xb0, 0x17, 0x70, 0x5e, 0x02, 0x26, 0x49, 0x89, 0xb1, 0xa0,
	0x4d, 0x76, 0x01, 0xb4, 0xd2, 0xa9, 0x72, 0xa1, 0x6e, 0x6d, 0xd6, 0xdc, 0x8c, 0x7a, 0x57, 0xef,
	0xe1, 0xac, 0xba, 0x1e, 0xeb, 0x03, 0x98, 0xf7, 0x02, 0xf5, 0x2e, 0xda, 0xd2, 0x06, 0x7b, 0x06,
	0x1d, 0x53, 0xdf, 0x98, 0xc3, 0x51, 0x52, 0xd1, 0x37, 0x5b, 0x5c, 0x47, 0x5b, 0xea, 0x7c, 0xa4,
	0xbf, 0xf6, 0x01, 0xf9, 0xbd, 0x0f, 0xc8, 0x9f, 0x7d, 0x40, 0x7e, 0xfc, 0x0d, 0x1a, 0xeb, 0x96,
	0xfd, 0xbf, 0xbf, 0xfb, 0x17, 0x00, 0x00, 0xff, 0xff, 0x06, 0xd5, 0xd6, 0x9e, 0xfc, 0x03, 0x00,
	0x00,
}
