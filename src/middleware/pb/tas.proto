syntax = "proto2";
package tas.middleware.pb;

message Message{

    required uint32 Code  = 1;

    optional bytes Signature  = 2;

    optional bytes Body  = 3;

}


message Transaction{

    optional bytes Data  = 1 ;

    optional uint64 Value = 2;

    required uint64 Nonce = 3;

    required bytes Source  = 4 ;

    optional bytes Target  = 5 ;

    required uint64 GasLimit = 6;

    required uint64 GasPrice = 7;

    required bytes Hash  = 8 ;

    optional bytes ExtraData  = 9 ;

    optional int32 ExtraDataType  = 10 ;
}

message TransactionRequestMessage{

    repeated bytes TransactionHashes = 1;

    required bytes CurrentBlockHash = 2;

    required uint64 BlockHeight = 3;

    required uint32 BlockLevel = 4;
}

message TransactionSlice{

    repeated Transaction transactions = 1;
}

message BlockHeader{

     optional bytes Hash  = 1 ;

     optional uint64 Height = 2;

     optional bytes PreHash  = 3 ;

     optional bytes PreTime  = 4 ;

     optional uint32 Level = 5;

     optional uint64 TotalLevel = 6;

     optional bytes CurTime  = 7 ;

     optional bytes Castor  = 8 ;

     optional bytes GroupId  = 9 ;

     optional bytes Signature  = 10 ;

     optional bytes RandSig  = 11 ;

     optional Hashes transactions = 13;

     optional bytes TxTree  = 14 ;

     optional bytes ReceiptTree  = 15 ;

     optional bytes StateTree  = 16 ;

     optional bytes ExtraData  = 17 ;

     optional Hashes EvictedTxs  = 18;

     repeated uint64 MinerNonces = 19;
}

message Block{
    required BlockHeader Header = 1;

    repeated Transaction transactions = 2;

}


message BlockSlice{
    repeated Block Blocks = 1;
}




message Member{

    required bytes Id = 1;

    required bytes PubKey  = 2 ;
}

message Group{

    optional  bytes Id   = 1;

	repeated  Member Members  = 2;

	optional  bytes PubKey = 3;

	optional  bytes Parent = 4;

	optional  bytes Dummy = 5;

	optional  bytes Signature  = 6;

	optional  uint64 BeginHeight  = 7;

    optional  uint64  DismissHeight = 8;
    optional  uint64    Authority = 9;
    optional  bytes     Name = 10;
    optional  bytes     Extends = 11;
}


message GroupInfo{
    required Group Group = 1;

    required bool IsTopGroup = 2;
}

message GroupSlice{
    repeated Group Groups = 1;
}


message BlockRequestInfo{

	required uint64 SourceHeight  =1;

	required bytes SourceCurrentHash =2;

}


message Hashes{

    repeated bytes hashes = 1;
}

message BlockHash{

	required  uint64 Height = 1;

	required  bytes  Hash = 2;
}

message BlockChainPiece{

    repeated BlockHash BlockHashes = 1;
}

message BlockInfo{

	optional Block Block = 1;

	optional BlockChainPiece ChainPiece = 2;

	optional bool IsTopBlock = 3;
}

message BlockHashesReq{

	required  uint64 Height = 1;

	required uint64 Length = 2;
}


message SignData{

	required  bytes DataHash  = 1;

	required  bytes DataSign = 2;

	required  bytes SignMember= 3;
}



message ConsensusGroupInitSummary{

    required  bytes ParentID  = 1;

	required  uint64  Authority = 2;

	required  bytes   Name = 3;

	required  bytes   DummyID = 4;

	required uint64    Members =5;
	required bytes    BeginTime =6;
	required bytes    MemberHash =7;
	required bytes    Signature =8;
    required uint64     GetReadyHeight=9;
	required uint64     BeginCastHeight=10;
	required uint64     DismissHeight=11;
	required uint64     TopHeight=12;
	required bytes    Extends =13;
}

message PubKeyInfo{

      required bytes ID = 1;

      required bytes PublicKey = 2;
}


message ConsensusGroupRawMessage{
    required ConsensusGroupInitSummary ConsensusGroupInitSummary = 1;

    repeated  PubKeyInfo Ids  = 2;

    required SignData sign = 3;

}

message SharePiece {
     required bytes Seckey = 1;

    required bytes Pubkey = 2;
}

message ConsensusSharePieceMessage{
    required bytes GISHash = 1;

    required bytes DummyID = 2;

    required bytes Dest = 3;

    required SharePiece  SharePiece = 4;

    required SignData  Sign = 5;

}

message ConsensusSignPubKeyMessage{
    required bytes GISHash = 1;

    required bytes DummyID = 2;

    required bytes	SignPK  = 3;

    required SignData 	SignData = 4;

    required bytes  GISSign = 5;

}



message StaticGroupSummary{

    required bytes GroupID  = 1;

    required bytes GroupPK  = 2;

    required ConsensusGroupInitSummary Gis  = 3;

}

message ConsensusGroupInitedMessage{

    required StaticGroupSummary StaticGroupSummary = 1;

    required SignData Sign = 2;
}

message ConsensusCurrentMessage{

    optional bytes GroupID  = 1;

    required bytes PreHash = 2;

    required bytes PreTime = 3;

    required uint64 BlockHeight = 4;

    required SignData Sign = 6;
}

message ConsensusBlockMessageBase{

    required BlockHeader Bh = 1;

    optional bytes	GroupID = 2;

    required SignData	Sign = 3;
}

message ConsensusBlockMessage{
    required Block Block = 1;

    optional bytes GroupID = 2;

    required SignData SignData = 3;
}


message ConsensusCreateGroupRawMessage{
    required ConsensusGroupInitSummary ConsensusGroupInitSummary = 1;

    repeated  bytes Ids  = 2;

    required SignData sign = 3;

}

message ConsensusCreateGroupSignMessage{
    required ConsensusGroupInitSummary ConsensusGroupInitSummary = 1;

    required SignData sign = 2;

}

message ConsensusPowResultMessage{
    required bytes Hash = 1;
    required uint64 Nonce = 2;
    required SignData Sign = 3;
}

message MinerNonce{
    required bytes MinerID = 1;
    required uint64 Nonce = 2;
}

message ConsensusPowConfirmMessage{
    required bytes Hash = 1;
    repeated MinerNonce NonceSeq = 2;
    required SignData Sign = 3;
}
