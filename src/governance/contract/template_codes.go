package contract

import (
	"common"
	ethcom "vm/common"
)

/*
**  Creator: pxf
**  Date: 2018/4/13 下午5:56
**  Description: 
*/
const (
	TEMPLATE_ABI = `[{"constant":true,"inputs":[{"name":"","type":"address"}],"name":"templates","outputs":[{"name":"code","type":"bytes"},{"name":"abi","type":"string"},{"name":"blockNum","type":"uint64"},{"name":"author","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"key","type":"address"}],"name":"template","outputs":[{"name":"code","type":"bytes"},{"name":"abi","type":"string"},{"name":"blockNum","type":"uint64"},{"name":"author","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"key","type":"address"},{"name":"code","type":"bytes"},{"name":"abi","type":"string"}],"name":"addTemplate","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}]`
	TEMPLATE_CODE = `6060604052341561000f57600080fd5b610b278061001e6000396000f300606060405260043610610057576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806320a99bd01461005c5780635e3573cc146101c8578063975f6f5214610334575b600080fd5b341561006757600080fd5b610093600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506103f3565b6040518080602001806020018567ffffffffffffffff1667ffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001838103835287818151815260200191508051906020019080838360005b83811015610123578082015181840152602081019050610108565b50505050905090810190601f1680156101505780820380516001836020036101000a031916815260200191505b50838103825286818151815260200191508051906020019080838360005b8381101561018957808201518184015260208101905061016e565b50505050905090810190601f1680156101b65780820380516001836020036101000a031916815260200191505b50965050505050505060405180910390f35b34156101d357600080fd5b6101ff600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610587565b6040518080602001806020018567ffffffffffffffff1667ffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001838103835287818151815260200191508051906020019080838360005b8381101561028f578082015181840152602081019050610274565b50505050905090810190601f1680156102bc5780820380516001836020036101000a031916815260200191505b50838103825286818151815260200191508051906020019080838360005b838110156102f55780820151818401526020810190506102da565b50505050905090810190601f1680156103225780820380516001836020036101000a031916815260200191505b50965050505050505060405180910390f35b341561033f57600080fd5b6103f1600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091905050610815565b005b6000602052806000526040600020600091509050806000018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561049f5780601f106104745761010080835404028352916020019161049f565b820191906000526020600020905b81548152906001019060200180831161048257829003601f168201915b505050505090806001018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561053d5780601f106105125761010080835404028352916020019161053d565b820191906000526020600020905b81548152906001019060200180831161052057829003601f168201915b5050505050908060020160009054906101000a900467ffffffffffffffff16908060020160089054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905084565b61058f6109ae565b6105976109c2565b6000806000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561066f5780601f106106445761010080835404028352916020019161066f565b820191906000526020600020905b81548152906001019060200180831161065257829003601f168201915b505050505093506000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561074b5780601f106107205761010080835404028352916020019161074b565b820191906000526020600020905b81548152906001019060200180831161072e57829003601f168201915b505050505092506000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160009054906101000a900467ffffffffffffffff1691506000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160089054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690509193509193565b816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001908051906020019061086a9291906109d6565b50806000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010190805190602001906108c0929190610a56565b50436000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550336000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160086101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050565b602060405190810160405280600081525090565b602060405190810160405280600081525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10610a1757805160ff1916838001178555610a45565b82800160010185558215610a45579182015b82811115610a44578251825591602001919060010190610a29565b5b509050610a529190610ad6565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10610a9757805160ff1916838001178555610ac5565b82800160010185558215610ac5579182015b82811115610ac4578251825591602001919060010190610aa9565b5b509050610ad29190610ad6565b5090565b610af891905b80821115610af4576000816000905550600101610adc565b5090565b905600a165627a7a723058200e59ec683f71dcd34113a1cf41ba95e364ff1b9878b2ddca68cec82c614fd0c00029`

)

type TemplateCode struct {
	BoundContract
	ctx *CallContext
}

type VoteTemplate struct {
	Code []byte
	Abi string
	BlockNum uint64
	Author ethcom.Address
}


func NewTemplateCode(ctx *CallContext, bc *BoundContract) (*TemplateCode) {
	return &TemplateCode{
		BoundContract: *bc,
		ctx:ctx,
	}
}

func (tc *TemplateCode) AddTemplate(name string, hexCode string, abi string) error {
	return tc.NoResultCall(tc.ctx,  NewCallOpt(nil, "addTemplate", common.StringToAddress(name), common.Hex2Bytes(hexCode), abi))
}

func (tc *TemplateCode) Template(name string) (*VoteTemplate, error) {
	if ret, err := tc.ResultCall(tc.ctx, func() interface{} {
		return &VoteTemplate{}
	},  NewCallOpt(nil, "template", common.StringToAddress(name))); err != nil {
		return nil, err
	} else {
		return ret.(*VoteTemplate), nil
	}

}

