// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package types

import (
	"encoding/json"
	"errors"

	"vm/common"
	"vm/common/hexutil"
)

var _ = (*receiptMarshaling)(nil)

func (r Receipt) MarshalJSON() ([]byte, error) {
	type Receipt struct {
		PostState         hexutil.Bytes  `json:"root"`
		Status            hexutil.Uint   `json:"status"`
		CumulativeGasUsed hexutil.Uint64 `json:"cumulativeGasUsed" `
		Bloom             Bloom          `json:"logsBloom"`
		Logs              []*Log         `json:"logs"`
		TxHash            common.Hash    `json:"transactionHash" gencodec:"required"`
		ContractAddress   common.Address `json:"contractAddress"`
		GasUsed           hexutil.Uint64 `json:"gasUsed"`
	}
	var enc Receipt
	enc.PostState = r.PostState
	enc.Status = hexutil.Uint(r.Status)
	enc.CumulativeGasUsed = hexutil.Uint64(r.CumulativeGasUsed)
	enc.Bloom = r.Bloom
	enc.Logs = r.Logs
	enc.TxHash = r.TxHash
	enc.ContractAddress = r.ContractAddress
	enc.GasUsed = hexutil.Uint64(r.GasUsed)
	return json.Marshal(&enc)
}

func (r *Receipt) UnmarshalJSON(input []byte) error {
	type Receipt struct {
		PostState         *hexutil.Bytes  `json:"root"`
		Status            *hexutil.Uint   `json:"status"`
		CumulativeGasUsed *hexutil.Uint64 `json:"cumulativeGasUsed"`
		Bloom             *Bloom          `json:"logsBloom"`
		Logs              []*Log          `json:"logs"`
		TxHash            *common.Hash    `json:"transactionHash" gencodec:"required"`
		ContractAddress   *common.Address `json:"contractAddress"`
		GasUsed           *hexutil.Uint64 `json:"gasUsed"`
	}
	var dec Receipt
	if err := json.Unmarshal(input, &dec); err != nil {
		return err
	}
	if dec.PostState != nil {
		r.PostState = *dec.PostState
	}
	if dec.Status != nil {
		r.Status = uint(*dec.Status)
	}

	r.CumulativeGasUsed = uint64(*dec.CumulativeGasUsed)

	r.Bloom = *dec.Bloom

	r.Logs = dec.Logs
	if dec.TxHash == nil {
		return errors.New("missing required field 'transactionHash' for Receipt")
	}
	r.TxHash = *dec.TxHash
	if dec.ContractAddress != nil {
		r.ContractAddress = *dec.ContractAddress
	}

	r.GasUsed = uint64(*dec.GasUsed)
	return nil
}
