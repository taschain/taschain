// Code generated by protoc-gen-go. DO NOT EDIT.
// source: tas.proto

/*
Package tas_pb is a generated protocol buffer package.

It is generated from these files:
	tas.proto

It has these top-level messages:
	Message
	Transaction
	TransactionRequestMessage
	TransactionSlice
	BlockHeader
	Block
	BlockSlice
	Member
	Group
	GroupSlice
	EntityRequestMessage
	Hashes
	ChainBlockHash
	ChainBlockHashSlice
	BlockMessage
	EntityTotalQNMessage
	ChainBlockHashesReq
	GroupMessage
	SignData
	ConsensusGroupInitSummary
	PubKeyInfo
	ConsensusGroupRawMessage
	SharePiece
	ConsensusSharePieceMessage
	ConsensusSignPubKeyMessage
	StaticGroupInfo
	ConsensusGroupInitedMessage
	ConsensusCurrentMessage
	ConsensusBlockMessageBase
	ConsensusBlockMessage
*/
package tas_pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Message struct {
	Code             *uint32 `protobuf:"varint,1,req,name=Code" json:"Code,omitempty"`
	Signature        []byte  `protobuf:"bytes,2,opt,name=Signature" json:"Signature,omitempty"`
	Body             []byte  `protobuf:"bytes,3,opt,name=Body" json:"Body,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Message) Reset()                    { *m = Message{} }
func (m *Message) String() string            { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()               {}
func (*Message) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Message) GetCode() uint32 {
	if m != nil && m.Code != nil {
		return *m.Code
	}
	return 0
}

func (m *Message) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *Message) GetBody() []byte {
	if m != nil {
		return m.Body
	}
	return nil
}

type Transaction struct {
	Data             []byte  `protobuf:"bytes,1,req,name=Data" json:"Data,omitempty"`
	Value            *uint64 `protobuf:"varint,2,opt,name=Value" json:"Value,omitempty"`
	Nonce            *uint64 `protobuf:"varint,3,req,name=Nonce" json:"Nonce,omitempty"`
	Source           []byte  `protobuf:"bytes,4,req,name=Source" json:"Source,omitempty"`
	Target           []byte  `protobuf:"bytes,5,opt,name=Target" json:"Target,omitempty"`
	GasLimit         *uint64 `protobuf:"varint,6,req,name=GasLimit" json:"GasLimit,omitempty"`
	GasPrice         *uint64 `protobuf:"varint,7,req,name=GasPrice" json:"GasPrice,omitempty"`
	Hash             []byte  `protobuf:"bytes,8,req,name=Hash" json:"Hash,omitempty"`
	ExtraData        []byte  `protobuf:"bytes,9,opt,name=ExtraData" json:"ExtraData,omitempty"`
	ExtraDataType    *int32  `protobuf:"varint,10,opt,name=ExtraDataType" json:"ExtraDataType,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Transaction) Reset()                    { *m = Transaction{} }
func (m *Transaction) String() string            { return proto.CompactTextString(m) }
func (*Transaction) ProtoMessage()               {}
func (*Transaction) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Transaction) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *Transaction) GetValue() uint64 {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return 0
}

func (m *Transaction) GetNonce() uint64 {
	if m != nil && m.Nonce != nil {
		return *m.Nonce
	}
	return 0
}

func (m *Transaction) GetSource() []byte {
	if m != nil {
		return m.Source
	}
	return nil
}

func (m *Transaction) GetTarget() []byte {
	if m != nil {
		return m.Target
	}
	return nil
}

func (m *Transaction) GetGasLimit() uint64 {
	if m != nil && m.GasLimit != nil {
		return *m.GasLimit
	}
	return 0
}

func (m *Transaction) GetGasPrice() uint64 {
	if m != nil && m.GasPrice != nil {
		return *m.GasPrice
	}
	return 0
}

func (m *Transaction) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

func (m *Transaction) GetExtraData() []byte {
	if m != nil {
		return m.ExtraData
	}
	return nil
}

func (m *Transaction) GetExtraDataType() int32 {
	if m != nil && m.ExtraDataType != nil {
		return *m.ExtraDataType
	}
	return 0
}

type TransactionRequestMessage struct {
	TransactionHashes [][]byte `protobuf:"bytes,1,rep,name=TransactionHashes" json:"TransactionHashes,omitempty"`
	SourceId          []byte   `protobuf:"bytes,2,req,name=SourceId" json:"SourceId,omitempty"`
	RequestTime       []byte   `protobuf:"bytes,3,req,name=RequestTime" json:"RequestTime,omitempty"`
	XXX_unrecognized  []byte   `json:"-"`
}

func (m *TransactionRequestMessage) Reset()                    { *m = TransactionRequestMessage{} }
func (m *TransactionRequestMessage) String() string            { return proto.CompactTextString(m) }
func (*TransactionRequestMessage) ProtoMessage()               {}
func (*TransactionRequestMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *TransactionRequestMessage) GetTransactionHashes() [][]byte {
	if m != nil {
		return m.TransactionHashes
	}
	return nil
}

func (m *TransactionRequestMessage) GetSourceId() []byte {
	if m != nil {
		return m.SourceId
	}
	return nil
}

func (m *TransactionRequestMessage) GetRequestTime() []byte {
	if m != nil {
		return m.RequestTime
	}
	return nil
}

type TransactionSlice struct {
	Transactions     []*Transaction `protobuf:"bytes,1,rep,name=transactions" json:"transactions,omitempty"`
	XXX_unrecognized []byte         `json:"-"`
}

func (m *TransactionSlice) Reset()                    { *m = TransactionSlice{} }
func (m *TransactionSlice) String() string            { return proto.CompactTextString(m) }
func (*TransactionSlice) ProtoMessage()               {}
func (*TransactionSlice) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *TransactionSlice) GetTransactions() []*Transaction {
	if m != nil {
		return m.Transactions
	}
	return nil
}

type BlockHeader struct {
	Hash             []byte  `protobuf:"bytes,1,opt,name=Hash" json:"Hash,omitempty"`
	Height           *uint64 `protobuf:"varint,2,opt,name=Height" json:"Height,omitempty"`
	PreHash          []byte  `protobuf:"bytes,3,opt,name=PreHash" json:"PreHash,omitempty"`
	PreTime          []byte  `protobuf:"bytes,4,opt,name=PreTime" json:"PreTime,omitempty"`
	QueueNumber      *uint64 `protobuf:"varint,5,opt,name=QueueNumber" json:"QueueNumber,omitempty"`
	TotalQN          *uint64 `protobuf:"varint,6,opt,name=TotalQN" json:"TotalQN,omitempty"`
	CurTime          []byte  `protobuf:"bytes,7,opt,name=CurTime" json:"CurTime,omitempty"`
	Castor           []byte  `protobuf:"bytes,8,opt,name=Castor" json:"Castor,omitempty"`
	GroupId          []byte  `protobuf:"bytes,9,opt,name=GroupId" json:"GroupId,omitempty"`
	Signature        []byte  `protobuf:"bytes,10,opt,name=Signature" json:"Signature,omitempty"`
	Nonce            *uint64 `protobuf:"varint,11,opt,name=Nonce" json:"Nonce,omitempty"`
	Transactions     *Hashes `protobuf:"bytes,12,opt,name=transactions" json:"transactions,omitempty"`
	TxTree           []byte  `protobuf:"bytes,13,opt,name=TxTree" json:"TxTree,omitempty"`
	ReceiptTree      []byte  `protobuf:"bytes,14,opt,name=ReceiptTree" json:"ReceiptTree,omitempty"`
	StateTree        []byte  `protobuf:"bytes,15,opt,name=StateTree" json:"StateTree,omitempty"`
	ExtraData        []byte  `protobuf:"bytes,16,opt,name=ExtraData" json:"ExtraData,omitempty"`
	EvictedTxs       *Hashes `protobuf:"bytes,17,opt,name=EvictedTxs" json:"EvictedTxs,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *BlockHeader) Reset()                    { *m = BlockHeader{} }
func (m *BlockHeader) String() string            { return proto.CompactTextString(m) }
func (*BlockHeader) ProtoMessage()               {}
func (*BlockHeader) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *BlockHeader) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

func (m *BlockHeader) GetHeight() uint64 {
	if m != nil && m.Height != nil {
		return *m.Height
	}
	return 0
}

func (m *BlockHeader) GetPreHash() []byte {
	if m != nil {
		return m.PreHash
	}
	return nil
}

func (m *BlockHeader) GetPreTime() []byte {
	if m != nil {
		return m.PreTime
	}
	return nil
}

func (m *BlockHeader) GetQueueNumber() uint64 {
	if m != nil && m.QueueNumber != nil {
		return *m.QueueNumber
	}
	return 0
}

func (m *BlockHeader) GetTotalQN() uint64 {
	if m != nil && m.TotalQN != nil {
		return *m.TotalQN
	}
	return 0
}

func (m *BlockHeader) GetCurTime() []byte {
	if m != nil {
		return m.CurTime
	}
	return nil
}

func (m *BlockHeader) GetCastor() []byte {
	if m != nil {
		return m.Castor
	}
	return nil
}

func (m *BlockHeader) GetGroupId() []byte {
	if m != nil {
		return m.GroupId
	}
	return nil
}

func (m *BlockHeader) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *BlockHeader) GetNonce() uint64 {
	if m != nil && m.Nonce != nil {
		return *m.Nonce
	}
	return 0
}

func (m *BlockHeader) GetTransactions() *Hashes {
	if m != nil {
		return m.Transactions
	}
	return nil
}

func (m *BlockHeader) GetTxTree() []byte {
	if m != nil {
		return m.TxTree
	}
	return nil
}

func (m *BlockHeader) GetReceiptTree() []byte {
	if m != nil {
		return m.ReceiptTree
	}
	return nil
}

func (m *BlockHeader) GetStateTree() []byte {
	if m != nil {
		return m.StateTree
	}
	return nil
}

func (m *BlockHeader) GetExtraData() []byte {
	if m != nil {
		return m.ExtraData
	}
	return nil
}

func (m *BlockHeader) GetEvictedTxs() *Hashes {
	if m != nil {
		return m.EvictedTxs
	}
	return nil
}

type Block struct {
	Header           *BlockHeader   `protobuf:"bytes,1,req,name=Header" json:"Header,omitempty"`
	Transactions     []*Transaction `protobuf:"bytes,2,rep,name=transactions" json:"transactions,omitempty"`
	XXX_unrecognized []byte         `json:"-"`
}

func (m *Block) Reset()                    { *m = Block{} }
func (m *Block) String() string            { return proto.CompactTextString(m) }
func (*Block) ProtoMessage()               {}
func (*Block) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *Block) GetHeader() *BlockHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *Block) GetTransactions() []*Transaction {
	if m != nil {
		return m.Transactions
	}
	return nil
}

type BlockSlice struct {
	Blocks           []*Block `protobuf:"bytes,1,rep,name=Blocks" json:"Blocks,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *BlockSlice) Reset()                    { *m = BlockSlice{} }
func (m *BlockSlice) String() string            { return proto.CompactTextString(m) }
func (*BlockSlice) ProtoMessage()               {}
func (*BlockSlice) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *BlockSlice) GetBlocks() []*Block {
	if m != nil {
		return m.Blocks
	}
	return nil
}

type Member struct {
	Id               []byte `protobuf:"bytes,1,req,name=Id" json:"Id,omitempty"`
	PubKey           []byte `protobuf:"bytes,2,req,name=PubKey" json:"PubKey,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *Member) Reset()                    { *m = Member{} }
func (m *Member) String() string            { return proto.CompactTextString(m) }
func (*Member) ProtoMessage()               {}
func (*Member) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *Member) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *Member) GetPubKey() []byte {
	if m != nil {
		return m.PubKey
	}
	return nil
}

type Group struct {
	Id               []byte    `protobuf:"bytes,1,opt,name=Id" json:"Id,omitempty"`
	Members          []*Member `protobuf:"bytes,2,rep,name=Members" json:"Members,omitempty"`
	PubKey           []byte    `protobuf:"bytes,3,opt,name=PubKey" json:"PubKey,omitempty"`
	Parent           []byte    `protobuf:"bytes,4,opt,name=Parent" json:"Parent,omitempty"`
	Dummy            []byte    `protobuf:"bytes,5,opt,name=Dummy" json:"Dummy,omitempty"`
	Signature        []byte    `protobuf:"bytes,6,opt,name=Signature" json:"Signature,omitempty"`
	XXX_unrecognized []byte    `json:"-"`
}

func (m *Group) Reset()                    { *m = Group{} }
func (m *Group) String() string            { return proto.CompactTextString(m) }
func (*Group) ProtoMessage()               {}
func (*Group) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *Group) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *Group) GetMembers() []*Member {
	if m != nil {
		return m.Members
	}
	return nil
}

func (m *Group) GetPubKey() []byte {
	if m != nil {
		return m.PubKey
	}
	return nil
}

func (m *Group) GetParent() []byte {
	if m != nil {
		return m.Parent
	}
	return nil
}

func (m *Group) GetDummy() []byte {
	if m != nil {
		return m.Dummy
	}
	return nil
}

func (m *Group) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

type GroupSlice struct {
	Groups           []*Group `protobuf:"bytes,1,rep,name=Groups" json:"Groups,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *GroupSlice) Reset()                    { *m = GroupSlice{} }
func (m *GroupSlice) String() string            { return proto.CompactTextString(m) }
func (*GroupSlice) ProtoMessage()               {}
func (*GroupSlice) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *GroupSlice) GetGroups() []*Group {
	if m != nil {
		return m.Groups
	}
	return nil
}

type EntityRequestMessage struct {
	SourceHeight      *uint64 `protobuf:"varint,1,req,name=SourceHeight" json:"SourceHeight,omitempty"`
	SourceCurrentHash []byte  `protobuf:"bytes,2,req,name=SourceCurrentHash" json:"SourceCurrentHash,omitempty"`
	SourceId          []byte  `protobuf:"bytes,3,req,name=SourceId" json:"SourceId,omitempty"`
	XXX_unrecognized  []byte  `json:"-"`
}

func (m *EntityRequestMessage) Reset()                    { *m = EntityRequestMessage{} }
func (m *EntityRequestMessage) String() string            { return proto.CompactTextString(m) }
func (*EntityRequestMessage) ProtoMessage()               {}
func (*EntityRequestMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *EntityRequestMessage) GetSourceHeight() uint64 {
	if m != nil && m.SourceHeight != nil {
		return *m.SourceHeight
	}
	return 0
}

func (m *EntityRequestMessage) GetSourceCurrentHash() []byte {
	if m != nil {
		return m.SourceCurrentHash
	}
	return nil
}

func (m *EntityRequestMessage) GetSourceId() []byte {
	if m != nil {
		return m.SourceId
	}
	return nil
}

type Hashes struct {
	Hashes           [][]byte `protobuf:"bytes,1,rep,name=hashes" json:"hashes,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *Hashes) Reset()                    { *m = Hashes{} }
func (m *Hashes) String() string            { return proto.CompactTextString(m) }
func (*Hashes) ProtoMessage()               {}
func (*Hashes) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *Hashes) GetHashes() [][]byte {
	if m != nil {
		return m.Hashes
	}
	return nil
}

type ChainBlockHash struct {
	Height           *uint64 `protobuf:"varint,1,req,name=Height" json:"Height,omitempty"`
	Hash             []byte  `protobuf:"bytes,2,req,name=Hash" json:"Hash,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ChainBlockHash) Reset()                    { *m = ChainBlockHash{} }
func (m *ChainBlockHash) String() string            { return proto.CompactTextString(m) }
func (*ChainBlockHash) ProtoMessage()               {}
func (*ChainBlockHash) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *ChainBlockHash) GetHeight() uint64 {
	if m != nil && m.Height != nil {
		return *m.Height
	}
	return 0
}

func (m *ChainBlockHash) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

type ChainBlockHashSlice struct {
	ChainBlockHashes []*ChainBlockHash `protobuf:"bytes,1,rep,name=ChainBlockHashes" json:"ChainBlockHashes,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *ChainBlockHashSlice) Reset()                    { *m = ChainBlockHashSlice{} }
func (m *ChainBlockHashSlice) String() string            { return proto.CompactTextString(m) }
func (*ChainBlockHashSlice) ProtoMessage()               {}
func (*ChainBlockHashSlice) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *ChainBlockHashSlice) GetChainBlockHashes() []*ChainBlockHash {
	if m != nil {
		return m.ChainBlockHashes
	}
	return nil
}

type BlockMessage struct {
	Blocks           *BlockSlice          `protobuf:"bytes,1,opt,name=Blocks" json:"Blocks,omitempty"`
	ChainBlockHash   *ChainBlockHashSlice `protobuf:"bytes,2,opt,name=ChainBlockHash" json:"ChainBlockHash,omitempty"`
	XXX_unrecognized []byte               `json:"-"`
}

func (m *BlockMessage) Reset()                    { *m = BlockMessage{} }
func (m *BlockMessage) String() string            { return proto.CompactTextString(m) }
func (*BlockMessage) ProtoMessage()               {}
func (*BlockMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *BlockMessage) GetBlocks() *BlockSlice {
	if m != nil {
		return m.Blocks
	}
	return nil
}

func (m *BlockMessage) GetChainBlockHash() *ChainBlockHashSlice {
	if m != nil {
		return m.ChainBlockHash
	}
	return nil
}

type EntityTotalQNMessage struct {
	TotalQN          *uint64 `protobuf:"varint,1,req,name=TotalQN" json:"TotalQN,omitempty"`
	SourceId         []byte  `protobuf:"bytes,2,req,name=SourceId" json:"SourceId,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *EntityTotalQNMessage) Reset()                    { *m = EntityTotalQNMessage{} }
func (m *EntityTotalQNMessage) String() string            { return proto.CompactTextString(m) }
func (*EntityTotalQNMessage) ProtoMessage()               {}
func (*EntityTotalQNMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *EntityTotalQNMessage) GetTotalQN() uint64 {
	if m != nil && m.TotalQN != nil {
		return *m.TotalQN
	}
	return 0
}

func (m *EntityTotalQNMessage) GetSourceId() []byte {
	if m != nil {
		return m.SourceId
	}
	return nil
}

type ChainBlockHashesReq struct {
	Height           *uint64 `protobuf:"varint,1,req,name=Height" json:"Height,omitempty"`
	Length           *uint64 `protobuf:"varint,2,req,name=Length" json:"Length,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ChainBlockHashesReq) Reset()                    { *m = ChainBlockHashesReq{} }
func (m *ChainBlockHashesReq) String() string            { return proto.CompactTextString(m) }
func (*ChainBlockHashesReq) ProtoMessage()               {}
func (*ChainBlockHashesReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *ChainBlockHashesReq) GetHeight() uint64 {
	if m != nil && m.Height != nil {
		return *m.Height
	}
	return 0
}

func (m *ChainBlockHashesReq) GetLength() uint64 {
	if m != nil && m.Length != nil {
		return *m.Length
	}
	return 0
}

type GroupMessage struct {
	Groups           *GroupSlice `protobuf:"bytes,1,opt,name=Groups" json:"Groups,omitempty"`
	Height           *uint64     `protobuf:"varint,2,opt,name=Height" json:"Height,omitempty"`
	Hash             []byte      `protobuf:"bytes,3,opt,name=Hash" json:"Hash,omitempty"`
	XXX_unrecognized []byte      `json:"-"`
}

func (m *GroupMessage) Reset()                    { *m = GroupMessage{} }
func (m *GroupMessage) String() string            { return proto.CompactTextString(m) }
func (*GroupMessage) ProtoMessage()               {}
func (*GroupMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *GroupMessage) GetGroups() *GroupSlice {
	if m != nil {
		return m.Groups
	}
	return nil
}

func (m *GroupMessage) GetHeight() uint64 {
	if m != nil && m.Height != nil {
		return *m.Height
	}
	return 0
}

func (m *GroupMessage) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

type SignData struct {
	DataHash         []byte `protobuf:"bytes,1,req,name=DataHash" json:"DataHash,omitempty"`
	DataSign         []byte `protobuf:"bytes,2,req,name=DataSign" json:"DataSign,omitempty"`
	SignMember       []byte `protobuf:"bytes,3,req,name=SignMember" json:"SignMember,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *SignData) Reset()                    { *m = SignData{} }
func (m *SignData) String() string            { return proto.CompactTextString(m) }
func (*SignData) ProtoMessage()               {}
func (*SignData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *SignData) GetDataHash() []byte {
	if m != nil {
		return m.DataHash
	}
	return nil
}

func (m *SignData) GetDataSign() []byte {
	if m != nil {
		return m.DataSign
	}
	return nil
}

func (m *SignData) GetSignMember() []byte {
	if m != nil {
		return m.SignMember
	}
	return nil
}

type ConsensusGroupInitSummary struct {
	ParentID         []byte  `protobuf:"bytes,1,req,name=ParentID" json:"ParentID,omitempty"`
	Authority        *uint64 `protobuf:"varint,2,req,name=Authority" json:"Authority,omitempty"`
	Name             []byte  `protobuf:"bytes,3,req,name=Name" json:"Name,omitempty"`
	DummyID          []byte  `protobuf:"bytes,4,req,name=DummyID" json:"DummyID,omitempty"`
	BeginTime        []byte  `protobuf:"bytes,5,req,name=BeginTime" json:"BeginTime,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ConsensusGroupInitSummary) Reset()                    { *m = ConsensusGroupInitSummary{} }
func (m *ConsensusGroupInitSummary) String() string            { return proto.CompactTextString(m) }
func (*ConsensusGroupInitSummary) ProtoMessage()               {}
func (*ConsensusGroupInitSummary) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *ConsensusGroupInitSummary) GetParentID() []byte {
	if m != nil {
		return m.ParentID
	}
	return nil
}

func (m *ConsensusGroupInitSummary) GetAuthority() uint64 {
	if m != nil && m.Authority != nil {
		return *m.Authority
	}
	return 0
}

func (m *ConsensusGroupInitSummary) GetName() []byte {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *ConsensusGroupInitSummary) GetDummyID() []byte {
	if m != nil {
		return m.DummyID
	}
	return nil
}

func (m *ConsensusGroupInitSummary) GetBeginTime() []byte {
	if m != nil {
		return m.BeginTime
	}
	return nil
}

type PubKeyInfo struct {
	ID               []byte `protobuf:"bytes,1,req,name=ID" json:"ID,omitempty"`
	PublicKey        []byte `protobuf:"bytes,2,req,name=PublicKey" json:"PublicKey,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *PubKeyInfo) Reset()                    { *m = PubKeyInfo{} }
func (m *PubKeyInfo) String() string            { return proto.CompactTextString(m) }
func (*PubKeyInfo) ProtoMessage()               {}
func (*PubKeyInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *PubKeyInfo) GetID() []byte {
	if m != nil {
		return m.ID
	}
	return nil
}

func (m *PubKeyInfo) GetPublicKey() []byte {
	if m != nil {
		return m.PublicKey
	}
	return nil
}

type ConsensusGroupRawMessage struct {
	ConsensusGroupInitSummary *ConsensusGroupInitSummary `protobuf:"bytes,1,req,name=ConsensusGroupInitSummary" json:"ConsensusGroupInitSummary,omitempty"`
	Ids                       []*PubKeyInfo              `protobuf:"bytes,2,rep,name=Ids" json:"Ids,omitempty"`
	Sign                      *SignData                  `protobuf:"bytes,3,req,name=sign" json:"sign,omitempty"`
	XXX_unrecognized          []byte                     `json:"-"`
}

func (m *ConsensusGroupRawMessage) Reset()                    { *m = ConsensusGroupRawMessage{} }
func (m *ConsensusGroupRawMessage) String() string            { return proto.CompactTextString(m) }
func (*ConsensusGroupRawMessage) ProtoMessage()               {}
func (*ConsensusGroupRawMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *ConsensusGroupRawMessage) GetConsensusGroupInitSummary() *ConsensusGroupInitSummary {
	if m != nil {
		return m.ConsensusGroupInitSummary
	}
	return nil
}

func (m *ConsensusGroupRawMessage) GetIds() []*PubKeyInfo {
	if m != nil {
		return m.Ids
	}
	return nil
}

func (m *ConsensusGroupRawMessage) GetSign() *SignData {
	if m != nil {
		return m.Sign
	}
	return nil
}

type SharePiece struct {
	Seckey           []byte `protobuf:"bytes,1,req,name=Seckey" json:"Seckey,omitempty"`
	Pubkey           []byte `protobuf:"bytes,2,req,name=Pubkey" json:"Pubkey,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *SharePiece) Reset()                    { *m = SharePiece{} }
func (m *SharePiece) String() string            { return proto.CompactTextString(m) }
func (*SharePiece) ProtoMessage()               {}
func (*SharePiece) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *SharePiece) GetSeckey() []byte {
	if m != nil {
		return m.Seckey
	}
	return nil
}

func (m *SharePiece) GetPubkey() []byte {
	if m != nil {
		return m.Pubkey
	}
	return nil
}

type ConsensusSharePieceMessage struct {
	GISHash          []byte      `protobuf:"bytes,1,req,name=GISHash" json:"GISHash,omitempty"`
	DummyID          []byte      `protobuf:"bytes,2,req,name=DummyID" json:"DummyID,omitempty"`
	Dest             []byte      `protobuf:"bytes,3,req,name=Dest" json:"Dest,omitempty"`
	SharePiece       *SharePiece `protobuf:"bytes,4,req,name=SharePiece" json:"SharePiece,omitempty"`
	Sign             *SignData   `protobuf:"bytes,5,req,name=Sign" json:"Sign,omitempty"`
	XXX_unrecognized []byte      `json:"-"`
}

func (m *ConsensusSharePieceMessage) Reset()                    { *m = ConsensusSharePieceMessage{} }
func (m *ConsensusSharePieceMessage) String() string            { return proto.CompactTextString(m) }
func (*ConsensusSharePieceMessage) ProtoMessage()               {}
func (*ConsensusSharePieceMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *ConsensusSharePieceMessage) GetGISHash() []byte {
	if m != nil {
		return m.GISHash
	}
	return nil
}

func (m *ConsensusSharePieceMessage) GetDummyID() []byte {
	if m != nil {
		return m.DummyID
	}
	return nil
}

func (m *ConsensusSharePieceMessage) GetDest() []byte {
	if m != nil {
		return m.Dest
	}
	return nil
}

func (m *ConsensusSharePieceMessage) GetSharePiece() *SharePiece {
	if m != nil {
		return m.SharePiece
	}
	return nil
}

func (m *ConsensusSharePieceMessage) GetSign() *SignData {
	if m != nil {
		return m.Sign
	}
	return nil
}

type ConsensusSignPubKeyMessage struct {
	GISHash          []byte    `protobuf:"bytes,1,req,name=GISHash" json:"GISHash,omitempty"`
	DummyID          []byte    `protobuf:"bytes,2,req,name=DummyID" json:"DummyID,omitempty"`
	SignPK           []byte    `protobuf:"bytes,3,req,name=SignPK" json:"SignPK,omitempty"`
	SignData         *SignData `protobuf:"bytes,4,req,name=SignData" json:"SignData,omitempty"`
	XXX_unrecognized []byte    `json:"-"`
}

func (m *ConsensusSignPubKeyMessage) Reset()                    { *m = ConsensusSignPubKeyMessage{} }
func (m *ConsensusSignPubKeyMessage) String() string            { return proto.CompactTextString(m) }
func (*ConsensusSignPubKeyMessage) ProtoMessage()               {}
func (*ConsensusSignPubKeyMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

func (m *ConsensusSignPubKeyMessage) GetGISHash() []byte {
	if m != nil {
		return m.GISHash
	}
	return nil
}

func (m *ConsensusSignPubKeyMessage) GetDummyID() []byte {
	if m != nil {
		return m.DummyID
	}
	return nil
}

func (m *ConsensusSignPubKeyMessage) GetSignPK() []byte {
	if m != nil {
		return m.SignPK
	}
	return nil
}

func (m *ConsensusSignPubKeyMessage) GetSignData() *SignData {
	if m != nil {
		return m.SignData
	}
	return nil
}

type StaticGroupInfo struct {
	GroupID          []byte                     `protobuf:"bytes,1,req,name=GroupID" json:"GroupID,omitempty"`
	GroupPK          []byte                     `protobuf:"bytes,2,req,name=GroupPK" json:"GroupPK,omitempty"`
	Members          []*PubKeyInfo              `protobuf:"bytes,3,rep,name=members" json:"members,omitempty"`
	Gis              *ConsensusGroupInitSummary `protobuf:"bytes,4,req,name=Gis" json:"Gis,omitempty"`
	BeginHeight      *uint64                    `protobuf:"varint,5,req,name=BeginHeight" json:"BeginHeight,omitempty"`
	XXX_unrecognized []byte                     `json:"-"`
}

func (m *StaticGroupInfo) Reset()                    { *m = StaticGroupInfo{} }
func (m *StaticGroupInfo) String() string            { return proto.CompactTextString(m) }
func (*StaticGroupInfo) ProtoMessage()               {}
func (*StaticGroupInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

func (m *StaticGroupInfo) GetGroupID() []byte {
	if m != nil {
		return m.GroupID
	}
	return nil
}

func (m *StaticGroupInfo) GetGroupPK() []byte {
	if m != nil {
		return m.GroupPK
	}
	return nil
}

func (m *StaticGroupInfo) GetMembers() []*PubKeyInfo {
	if m != nil {
		return m.Members
	}
	return nil
}

func (m *StaticGroupInfo) GetGis() *ConsensusGroupInitSummary {
	if m != nil {
		return m.Gis
	}
	return nil
}

func (m *StaticGroupInfo) GetBeginHeight() uint64 {
	if m != nil && m.BeginHeight != nil {
		return *m.BeginHeight
	}
	return 0
}

type ConsensusGroupInitedMessage struct {
	StaticGroupInfo  *StaticGroupInfo `protobuf:"bytes,1,req,name=StaticGroupInfo" json:"StaticGroupInfo,omitempty"`
	Sign             *SignData        `protobuf:"bytes,2,req,name=Sign" json:"Sign,omitempty"`
	XXX_unrecognized []byte           `json:"-"`
}

func (m *ConsensusGroupInitedMessage) Reset()                    { *m = ConsensusGroupInitedMessage{} }
func (m *ConsensusGroupInitedMessage) String() string            { return proto.CompactTextString(m) }
func (*ConsensusGroupInitedMessage) ProtoMessage()               {}
func (*ConsensusGroupInitedMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{26} }

func (m *ConsensusGroupInitedMessage) GetStaticGroupInfo() *StaticGroupInfo {
	if m != nil {
		return m.StaticGroupInfo
	}
	return nil
}

func (m *ConsensusGroupInitedMessage) GetSign() *SignData {
	if m != nil {
		return m.Sign
	}
	return nil
}

type ConsensusCurrentMessage struct {
	GroupID          []byte    `protobuf:"bytes,1,opt,name=GroupID" json:"GroupID,omitempty"`
	PreHash          []byte    `protobuf:"bytes,2,req,name=PreHash" json:"PreHash,omitempty"`
	PreTime          []byte    `protobuf:"bytes,3,req,name=PreTime" json:"PreTime,omitempty"`
	BlockHeight      *uint64   `protobuf:"varint,4,req,name=BlockHeight" json:"BlockHeight,omitempty"`
	Sign             *SignData `protobuf:"bytes,6,req,name=Sign" json:"Sign,omitempty"`
	XXX_unrecognized []byte    `json:"-"`
}

func (m *ConsensusCurrentMessage) Reset()                    { *m = ConsensusCurrentMessage{} }
func (m *ConsensusCurrentMessage) String() string            { return proto.CompactTextString(m) }
func (*ConsensusCurrentMessage) ProtoMessage()               {}
func (*ConsensusCurrentMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{27} }

func (m *ConsensusCurrentMessage) GetGroupID() []byte {
	if m != nil {
		return m.GroupID
	}
	return nil
}

func (m *ConsensusCurrentMessage) GetPreHash() []byte {
	if m != nil {
		return m.PreHash
	}
	return nil
}

func (m *ConsensusCurrentMessage) GetPreTime() []byte {
	if m != nil {
		return m.PreTime
	}
	return nil
}

func (m *ConsensusCurrentMessage) GetBlockHeight() uint64 {
	if m != nil && m.BlockHeight != nil {
		return *m.BlockHeight
	}
	return 0
}

func (m *ConsensusCurrentMessage) GetSign() *SignData {
	if m != nil {
		return m.Sign
	}
	return nil
}

type ConsensusBlockMessageBase struct {
	Bh               *BlockHeader `protobuf:"bytes,1,req,name=Bh" json:"Bh,omitempty"`
	GroupID          []byte       `protobuf:"bytes,2,opt,name=GroupID" json:"GroupID,omitempty"`
	Sign             *SignData    `protobuf:"bytes,3,req,name=Sign" json:"Sign,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *ConsensusBlockMessageBase) Reset()                    { *m = ConsensusBlockMessageBase{} }
func (m *ConsensusBlockMessageBase) String() string            { return proto.CompactTextString(m) }
func (*ConsensusBlockMessageBase) ProtoMessage()               {}
func (*ConsensusBlockMessageBase) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{28} }

func (m *ConsensusBlockMessageBase) GetBh() *BlockHeader {
	if m != nil {
		return m.Bh
	}
	return nil
}

func (m *ConsensusBlockMessageBase) GetGroupID() []byte {
	if m != nil {
		return m.GroupID
	}
	return nil
}

func (m *ConsensusBlockMessageBase) GetSign() *SignData {
	if m != nil {
		return m.Sign
	}
	return nil
}

type ConsensusBlockMessage struct {
	Block            *Block    `protobuf:"bytes,1,req,name=Block" json:"Block,omitempty"`
	GroupID          []byte    `protobuf:"bytes,2,opt,name=GroupID" json:"GroupID,omitempty"`
	SignData         *SignData `protobuf:"bytes,3,req,name=SignData" json:"SignData,omitempty"`
	XXX_unrecognized []byte    `json:"-"`
}

func (m *ConsensusBlockMessage) Reset()                    { *m = ConsensusBlockMessage{} }
func (m *ConsensusBlockMessage) String() string            { return proto.CompactTextString(m) }
func (*ConsensusBlockMessage) ProtoMessage()               {}
func (*ConsensusBlockMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{29} }

func (m *ConsensusBlockMessage) GetBlock() *Block {
	if m != nil {
		return m.Block
	}
	return nil
}

func (m *ConsensusBlockMessage) GetGroupID() []byte {
	if m != nil {
		return m.GroupID
	}
	return nil
}

func (m *ConsensusBlockMessage) GetSignData() *SignData {
	if m != nil {
		return m.SignData
	}
	return nil
}

func init() {
	proto.RegisterType((*Message)(nil), "tas.pb.Message")
	proto.RegisterType((*Transaction)(nil), "tas.pb.Transaction")
	proto.RegisterType((*TransactionRequestMessage)(nil), "tas.pb.TransactionRequestMessage")
	proto.RegisterType((*TransactionSlice)(nil), "tas.pb.TransactionSlice")
	proto.RegisterType((*BlockHeader)(nil), "tas.pb.BlockHeader")
	proto.RegisterType((*Block)(nil), "tas.pb.Block")
	proto.RegisterType((*BlockSlice)(nil), "tas.pb.BlockSlice")
	proto.RegisterType((*Member)(nil), "tas.pb.Member")
	proto.RegisterType((*Group)(nil), "tas.pb.Group")
	proto.RegisterType((*GroupSlice)(nil), "tas.pb.GroupSlice")
	proto.RegisterType((*EntityRequestMessage)(nil), "tas.pb.EntityRequestMessage")
	proto.RegisterType((*Hashes)(nil), "tas.pb.Hashes")
	proto.RegisterType((*ChainBlockHash)(nil), "tas.pb.ChainBlockHash")
	proto.RegisterType((*ChainBlockHashSlice)(nil), "tas.pb.ChainBlockHashSlice")
	proto.RegisterType((*BlockMessage)(nil), "tas.pb.BlockMessage")
	proto.RegisterType((*EntityTotalQNMessage)(nil), "tas.pb.EntityTotalQNMessage")
	proto.RegisterType((*ChainBlockHashesReq)(nil), "tas.pb.ChainBlockHashesReq")
	proto.RegisterType((*GroupMessage)(nil), "tas.pb.GroupMessage")
	proto.RegisterType((*SignData)(nil), "tas.pb.SignData")
	proto.RegisterType((*ConsensusGroupInitSummary)(nil), "tas.pb.ConsensusGroupInitSummary")
	proto.RegisterType((*PubKeyInfo)(nil), "tas.pb.PubKeyInfo")
	proto.RegisterType((*ConsensusGroupRawMessage)(nil), "tas.pb.ConsensusGroupRawMessage")
	proto.RegisterType((*SharePiece)(nil), "tas.pb.SharePiece")
	proto.RegisterType((*ConsensusSharePieceMessage)(nil), "tas.pb.ConsensusSharePieceMessage")
	proto.RegisterType((*ConsensusSignPubKeyMessage)(nil), "tas.pb.ConsensusSignPubKeyMessage")
	proto.RegisterType((*StaticGroupInfo)(nil), "tas.pb.StaticGroupInfo")
	proto.RegisterType((*ConsensusGroupInitedMessage)(nil), "tas.pb.ConsensusGroupInitedMessage")
	proto.RegisterType((*ConsensusCurrentMessage)(nil), "tas.pb.ConsensusCurrentMessage")
	proto.RegisterType((*ConsensusBlockMessageBase)(nil), "tas.pb.ConsensusBlockMessageBase")
	proto.RegisterType((*ConsensusBlockMessage)(nil), "tas.pb.ConsensusBlockMessage")
}

func init() { proto.RegisterFile("tas.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1366 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x56, 0xc1, 0x6e, 0xdb, 0x46,
	0x10, 0x05, 0x49, 0x89, 0x76, 0x46, 0xb2, 0xe3, 0x30, 0xa9, 0xc3, 0x24, 0x45, 0xa1, 0x6e, 0x5c,
	0xc0, 0x68, 0x03, 0xa3, 0x70, 0x0e, 0x05, 0x8a, 0x5c, 0x22, 0xd9, 0x70, 0x04, 0x27, 0xae, 0x43,
	0x0b, 0x05, 0x7a, 0x2a, 0x68, 0x69, 0x23, 0x11, 0xb6, 0x48, 0x87, 0x5c, 0xb6, 0xd6, 0xa9, 0x05,
	0x1a, 0xb4, 0xa7, 0x5e, 0x7b, 0xef, 0xa1, 0xe7, 0xfe, 0x41, 0xaf, 0x05, 0xfa, 0x55, 0xc5, 0xce,
	0xce, 0x2e, 0x97, 0x92, 0xa5, 0x06, 0xe8, 0x89, 0x7c, 0x33, 0xcb, 0xe5, 0xcc, 0x9b, 0x37, 0xb3,
	0x0b, 0xb7, 0x44, 0x5c, 0xec, 0x5d, 0xe5, 0x99, 0xc8, 0x02, 0x1f, 0x5f, 0xcf, 0xd9, 0x57, 0xb0,
	0xf6, 0x8a, 0x17, 0x45, 0x3c, 0xe6, 0x41, 0x00, 0x8d, 0x5e, 0x36, 0xe2, 0xa1, 0xd3, 0x71, 0x77,
	0x37, 0x22, 0x7c, 0x0f, 0x3e, 0x84, 0x5b, 0x67, 0xc9, 0x38, 0x8d, 0x45, 0x99, 0xf3, 0xd0, 0xed,
	0x38, 0xbb, 0xed, 0xa8, 0x32, 0xc8, 0x2f, 0xba, 0xd9, 0x68, 0x16, 0x7a, 0xe8, 0xc0, 0x77, 0xf6,
	0xab, 0x0b, 0xad, 0x41, 0x1e, 0xa7, 0x45, 0x3c, 0x14, 0x49, 0x96, 0xca, 0x35, 0x07, 0xb1, 0x88,
	0x71, 0xd7, 0x76, 0x84, 0xef, 0xc1, 0x3d, 0x68, 0x7e, 0x1d, 0x5f, 0x96, 0x6a, 0xc7, 0x46, 0xa4,
	0x80, 0xb4, 0x9e, 0x64, 0xe9, 0x90, 0x87, 0x5e, 0xc7, 0x95, 0x56, 0x04, 0xc1, 0x36, 0xf8, 0x67,
	0x59, 0x99, 0x0f, 0x79, 0xd8, 0xc0, 0x1d, 0x08, 0x49, 0xfb, 0x20, 0xce, 0xc7, 0x5c, 0x84, 0x4d,
	0xfc, 0x3b, 0xa1, 0xe0, 0x21, 0xac, 0x1f, 0xc5, 0xc5, 0xcb, 0x64, 0x9a, 0x88, 0xd0, 0xc7, 0x8d,
	0x0c, 0x26, 0xdf, 0x69, 0x9e, 0x0c, 0x79, 0xb8, 0x66, 0x7c, 0x88, 0x65, 0x9c, 0x2f, 0xe2, 0x62,
	0x12, 0xae, 0xab, 0x38, 0xe5, 0xbb, 0xcc, 0xfe, 0xf0, 0x5a, 0xe4, 0x31, 0x26, 0x70, 0x4b, 0x65,
	0x6f, 0x0c, 0xc1, 0x0e, 0x6c, 0x18, 0x30, 0x98, 0x5d, 0xf1, 0x10, 0x3a, 0xce, 0x6e, 0x33, 0xaa,
	0x1b, 0xd9, 0x2f, 0x0e, 0x3c, 0xb0, 0xf8, 0x88, 0xf8, 0xdb, 0x92, 0x17, 0x42, 0x73, 0xfe, 0x04,
	0xee, 0x58, 0x4e, 0xf9, 0x53, 0x5e, 0x84, 0x4e, 0xc7, 0xdb, 0x6d, 0x47, 0x8b, 0x0e, 0x19, 0xbf,
	0xca, 0xbe, 0x3f, 0x0a, 0x5d, 0x8c, 0xd3, 0xe0, 0xa0, 0x03, 0x2d, 0xda, 0x7b, 0x90, 0x4c, 0x15,
	0x87, 0xed, 0xc8, 0x36, 0xb1, 0x63, 0xd8, 0xb2, 0xb6, 0x3c, 0xbb, 0x94, 0x59, 0x7f, 0x01, 0x6d,
	0x51, 0xd9, 0xd4, 0xaf, 0x5b, 0xfb, 0x77, 0xf7, 0x94, 0x3a, 0xf6, 0xec, 0xc0, 0x6b, 0x0b, 0xd9,
	0x4f, 0x0d, 0x68, 0x75, 0x2f, 0xb3, 0xe1, 0xc5, 0x0b, 0x1e, 0x8f, 0x78, 0x6e, 0xe8, 0x73, 0x94,
	0x14, 0x90, 0xbe, 0x6d, 0xf0, 0x5f, 0xf0, 0x64, 0x3c, 0x11, 0x54, 0x67, 0x42, 0x41, 0x08, 0x6b,
	0xa7, 0x39, 0xc7, 0xe5, 0x4a, 0x39, 0x1a, 0x92, 0x07, 0x13, 0x68, 0x18, 0x8f, 0x84, 0x32, 0xbd,
	0xd7, 0x25, 0x2f, 0xf9, 0x49, 0x39, 0x3d, 0xe7, 0x39, 0xd6, 0xbc, 0x11, 0xd9, 0x26, 0xf9, 0xed,
	0x20, 0x13, 0xf1, 0xe5, 0xeb, 0x93, 0xd0, 0x47, 0xaf, 0x86, 0xd2, 0xd3, 0x2b, 0x73, 0xdc, 0x75,
	0x4d, 0xed, 0x4a, 0x50, 0x46, 0xd8, 0x8b, 0x0b, 0x91, 0xe5, 0xe1, 0xba, 0x12, 0x91, 0x42, 0xf2,
	0x8b, 0xa3, 0x3c, 0x2b, 0xaf, 0xfa, 0x23, 0x2a, 0xbb, 0x86, 0xf5, 0x86, 0x80, 0xf9, 0x86, 0x30,
	0x12, 0x6e, 0x29, 0x61, 0x2b, 0x09, 0xef, 0xcf, 0x91, 0xdc, 0xee, 0x38, 0xbb, 0xad, 0xfd, 0x4d,
	0x4d, 0xb2, 0x2a, 0x6e, 0x9d, 0x5f, 0x94, 0xf7, 0xf5, 0x20, 0xe7, 0x3c, 0xdc, 0x20, 0x79, 0x23,
	0x52, 0x65, 0x1e, 0xf2, 0xe4, 0x4a, 0xa0, 0x73, 0x13, 0x9d, 0xb6, 0x09, 0x23, 0x14, 0xb1, 0xe0,
	0xe8, 0xbf, 0x4d, 0x11, 0x6a, 0x43, 0x5d, 0xd2, 0x5b, 0xf3, 0x92, 0xde, 0x03, 0x38, 0xfc, 0x2e,
	0x19, 0x0a, 0x3e, 0x1a, 0x5c, 0x17, 0xe1, 0x9d, 0x1b, 0xe3, 0xb4, 0x56, 0xb0, 0x29, 0x34, 0x51,
	0x04, 0xc1, 0x67, 0xb2, 0xd4, 0x52, 0x08, 0xd8, 0xe7, 0x96, 0x82, 0x2c, 0x8d, 0x44, 0xb4, 0x64,
	0x41, 0x74, 0xee, 0xfb, 0x8a, 0xee, 0x29, 0x00, 0xee, 0xa7, 0xb4, 0xfb, 0x09, 0xf8, 0x88, 0xb4,
	0x6a, 0x37, 0x6a, 0xff, 0x8c, 0xc8, 0xc9, 0x3e, 0x07, 0xff, 0x15, 0x47, 0x85, 0x6c, 0x82, 0xdb,
	0x1f, 0xd1, 0x20, 0x72, 0xfb, 0x23, 0xc9, 0xf1, 0x69, 0x79, 0x7e, 0xcc, 0x67, 0xd4, 0x4c, 0x84,
	0xd8, 0x1f, 0x0e, 0x34, 0xb1, 0xde, 0xe6, 0x0b, 0x87, 0xbe, 0xd8, 0x95, 0xd3, 0x52, 0xee, 0xa5,
	0x83, 0x36, 0xe4, 0x28, 0x73, 0xa4, 0xdd, 0xd6, 0xde, 0x4a, 0xe2, 0x84, 0xd0, 0x1e, 0xe7, 0x3c,
	0x15, 0x24, 0x70, 0x42, 0x52, 0x39, 0x07, 0xe5, 0x74, 0x3a, 0xa3, 0x69, 0xa6, 0x40, 0x5d, 0x6d,
	0xfe, 0x9c, 0xda, 0x24, 0x1d, 0x18, 0xa6, 0xa1, 0x03, 0xd1, 0x02, 0x1d, 0x68, 0x8d, 0xc8, 0xc9,
	0xde, 0x39, 0x70, 0xef, 0x30, 0x15, 0x89, 0x98, 0xcd, 0x8d, 0x22, 0x06, 0x6d, 0x35, 0x4c, 0xa8,
	0x67, 0x1d, 0x1c, 0x90, 0x35, 0x9b, 0x1c, 0x57, 0x0a, 0xf7, 0xca, 0x5c, 0x86, 0x8d, 0x3d, 0xac,
	0xc8, 0x5b, 0x74, 0xd4, 0xc6, 0x95, 0x57, 0x1f, 0x57, 0xac, 0x03, 0x3e, 0x0d, 0xb5, 0x6d, 0xf0,
	0x27, 0xf6, 0xdc, 0x23, 0xc4, 0x9e, 0xc1, 0x66, 0x6f, 0x12, 0x27, 0xa9, 0x52, 0x50, 0x7d, 0x9e,
	0xa8, 0xd8, 0xf4, 0x3c, 0xd1, 0xb3, 0xc7, 0xad, 0x46, 0x37, 0xfb, 0x06, 0xee, 0xd6, 0xbf, 0x56,
	0x24, 0x75, 0x61, 0xab, 0x6e, 0xe6, 0x9a, 0xae, 0x6d, 0x4d, 0x57, 0xdd, 0x1f, 0x2d, 0xac, 0x67,
	0x3f, 0x40, 0x1b, 0xa1, 0x26, 0xee, 0x53, 0x4b, 0x87, 0xb2, 0x61, 0x82, 0x9a, 0x0e, 0xf1, 0xbf,
	0x5a, 0x8c, 0x41, 0x6f, 0x3e, 0x29, 0x1c, 0x8d, 0xad, 0xfd, 0x47, 0x37, 0xff, 0x5d, 0x7d, 0x3c,
	0xf7, 0x09, 0x7b, 0xa9, 0x2b, 0x48, 0x03, 0x4e, 0x07, 0x62, 0x4d, 0x40, 0x45, 0x90, 0x99, 0x80,
	0x2b, 0x0e, 0x0e, 0x76, 0x38, 0xcf, 0x14, 0x2f, 0x22, 0xfe, 0x76, 0x29, 0xd9, 0xdb, 0xe0, 0xbf,
	0xe4, 0xe9, 0x58, 0x28, 0xba, 0x1b, 0x11, 0x21, 0xf6, 0x06, 0xda, 0xa8, 0x30, 0x8b, 0x15, 0x23,
	0xc7, 0x1a, 0x2b, 0x95, 0x64, 0xb5, 0x26, 0x97, 0x1e, 0x14, 0xba, 0xb0, 0x5e, 0x75, 0xa8, 0xb0,
	0x73, 0x58, 0x97, 0x1d, 0x80, 0xe3, 0xea, 0x21, 0xac, 0xcb, 0x27, 0x1d, 0x3c, 0x98, 0x96, 0xc6,
	0xda, 0x27, 0xd7, 0xea, 0x94, 0x35, 0x0e, 0x3e, 0x02, 0x90, 0x4f, 0xd5, 0xab, 0x24, 0x4d, 0xcb,
	0xc2, 0x7e, 0x77, 0xe0, 0x41, 0x2f, 0x4b, 0x0b, 0x9e, 0x16, 0x65, 0xa1, 0x26, 0x7f, 0x9a, 0x88,
	0xb3, 0x72, 0x3a, 0x8d, 0xf3, 0x99, 0xdc, 0x59, 0x35, 0x6d, 0xff, 0x40, 0xff, 0x55, 0x63, 0xd9,
	0xb0, 0xcf, 0x4b, 0x31, 0xc9, 0xf2, 0x44, 0xcc, 0x88, 0xa0, 0xca, 0x20, 0xf3, 0x39, 0x89, 0xcd,
	0xe1, 0x8c, 0xef, 0xb2, 0x68, 0xd8, 0xeb, 0xfd, 0x03, 0xba, 0xe0, 0x68, 0x28, 0xf7, 0xea, 0xf2,
	0x71, 0x92, 0xe2, 0xc1, 0xd5, 0x44, 0x5f, 0x65, 0x60, 0x5f, 0x02, 0xa8, 0x91, 0xd2, 0x4f, 0xdf,
	0x64, 0x38, 0xa8, 0x0e, 0xcc, 0x68, 0xc3, 0x6f, 0x4f, 0xcb, 0xf3, 0xcb, 0x64, 0x58, 0x4d, 0xb7,
	0xca, 0xc0, 0xfe, 0x76, 0x20, 0xac, 0xe7, 0x17, 0xc5, 0xdf, 0xeb, 0xc2, 0x7d, 0xbb, 0x22, 0x77,
	0x9a, 0xee, 0x1f, 0x1b, 0xb5, 0x2e, 0x5b, 0x18, 0xad, 0xe0, 0x6f, 0x07, 0xbc, 0xfe, 0x48, 0x0f,
	0x50, 0x23, 0x8b, 0x2a, 0x99, 0x48, 0xba, 0x83, 0x1d, 0x68, 0x14, 0xb2, 0x76, 0x1e, 0xfe, 0x71,
	0x4b, 0x2f, 0xd3, 0xb5, 0x8f, 0xd0, 0xcb, 0x9e, 0x01, 0x9c, 0x4d, 0xe2, 0x9c, 0x9f, 0x26, 0x9c,
	0xee, 0x8a, 0x7c, 0x78, 0xc1, 0x67, 0xc4, 0x04, 0x21, 0x1a, 0xc6, 0x17, 0xb5, 0x41, 0x7f, 0xc1,
	0x67, 0xec, 0x2f, 0x07, 0x1e, 0x9a, 0x38, 0xab, 0x7d, 0xac, 0x7e, 0x3a, 0xea, 0x9f, 0x59, 0xea,
	0xd2, 0xd0, 0x2e, 0x9a, 0x5b, 0x2f, 0x9a, 0xbc, 0xee, 0xf2, 0x42, 0xe8, 0x12, 0xcb, 0xf7, 0x60,
	0xdf, 0x0e, 0x12, 0xab, 0x6c, 0xe5, 0x5d, 0x79, 0x22, 0x3b, 0x95, 0x1d, 0x68, 0xa0, 0x74, 0x9b,
	0xcb, 0xd2, 0x97, 0x6f, 0xec, 0xb7, 0x5a, 0x02, 0xc9, 0x38, 0x55, 0x2c, 0xfe, 0x9f, 0x04, 0x24,
	0x87, 0x72, 0xa3, 0x63, 0x4a, 0x81, 0x50, 0xf0, 0xa4, 0xea, 0x3b, 0x4a, 0x61, 0x31, 0x28, 0xb3,
	0x82, 0xfd, 0xe3, 0xc0, 0x6d, 0x79, 0xe9, 0x48, 0x86, 0x54, 0xfe, 0x37, 0x59, 0x75, 0xa9, 0x3a,
	0x30, 0xd1, 0x28, 0x68, 0x3c, 0xa7, 0xc7, 0x3a, 0x1a, 0x82, 0xc1, 0x13, 0x58, 0x9b, 0xd2, 0x81,
	0xeb, 0x2d, 0xd5, 0x8b, 0x5e, 0x12, 0x3c, 0x05, 0xef, 0x28, 0x29, 0x28, 0xbc, 0xf7, 0x10, 0xa9,
	0x5c, 0x2d, 0x6f, 0x54, 0xd8, 0x55, 0x34, 0x81, 0x9a, 0xd8, 0xb4, 0xb6, 0x89, 0xfd, 0xec, 0xc0,
	0xa3, 0xc5, 0x4d, 0xf8, 0x48, 0xd3, 0xfc, 0x7c, 0x21, 0x57, 0xea, 0x93, 0xfb, 0x86, 0xa1, 0xba,
	0x3b, 0x5a, 0xe0, 0x46, 0x97, 0xdb, 0x5d, 0x59, 0xee, 0x3f, 0x1d, 0xb8, 0x6f, 0x02, 0xa1, 0x93,
	0xd6, 0xae, 0xb5, 0x61, 0xd7, 0x99, 0x63, 0x57, 0x5f, 0xb7, 0x89, 0xdd, 0x1b, 0xae, 0xdb, 0x9e,
	0xf1, 0xe8, 0xeb, 0x36, 0xdd, 0xdc, 0x90, 0x94, 0x06, 0x91, 0x52, 0x99, 0x4c, 0xc4, 0xfe, 0xca,
	0x88, 0x7f, 0xb4, 0x27, 0xa9, 0x7d, 0x6a, 0x76, 0xe3, 0x82, 0x07, 0x8f, 0xc1, 0xed, 0x4e, 0x56,
	0xdd, 0x18, 0xdd, 0xee, 0xc4, 0x4e, 0xcc, 0xad, 0x27, 0xa6, 0x43, 0xf0, 0x56, 0x86, 0xf0, 0xce,
	0x81, 0x0f, 0x6e, 0x0c, 0x21, 0x78, 0x4c, 0xb7, 0x57, 0x8a, 0x60, 0xee, 0xfe, 0x48, 0x37, 0xdb,
	0xe5, 0xbf, 0xb7, 0x3b, 0xc2, 0xfb, 0xaf, 0x8e, 0xf8, 0x37, 0x00, 0x00, 0xff, 0xff, 0x68, 0xcf,
	0x0d, 0x79, 0x7c, 0x0f, 0x00, 0x00,
}
